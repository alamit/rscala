
R Under development (unstable) (2016-07-05 r70861) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> 
> serialize <- as.logical(Sys.getenv("RSCALA_SERIALIZE"))
> output <- as.logical(Sys.getenv("RSCALA_OUTPUT"))
> cat(serialize,"\n")
FALSE 
> cat(output,"\n")
TRUE 
> s <- scala(c("commons-math3-3.2.jar","shallot.jar"),serialize=serialize,stdout=output,stderr=output)
> s %~% "scala.util.Properties.versionNumberString"
[1] "2.11.8"
> 
> 
> scalap(s,"org.apache.commons.math3.random.RandomDataGenerator")
class/object org.apache.commons.math3.random.RandomDataGenerator not found.
> rdg <- tryCatch(s$do("org.apache.commons.math3.random.RandomDataGenerator")$new(),error=function(e) e)  # There is some incompatability between Scala REPL classloader and the Apache Commons Math jar.
> rdg <- s$do("org.apache.commons.math3.random.RandomDataGenerator")$new()                                # Rerun and it works fine.
> rexp <- rdg$nextExponential(2,evaluate=FALSE)
> 
> library(microbenchmark)
> options(width=120)
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr     min       lq     mean   median       uq       max neval
 rdg$nextExponential(4) 595.773 620.3070 696.7593 639.7520 667.8005  2184.495  1000
                rexp(4) 527.381 546.2975 625.7710 565.0025 587.4260 14704.098  1000
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr     min       lq     mean   median      uq      max neval
 rdg$nextExponential(4) 586.222 600.1360 619.1538 605.6535 614.461 1365.492  1000
                rexp(4) 518.134 528.7785 545.1591 533.6065 541.766 3086.542  1000
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr     min       lq     mean   median       uq      max neval
 rdg$nextExponential(4) 555.457 574.9765 596.5697 582.5930 598.4925 3715.198  1000
                rexp(4) 487.235 503.4070 520.4126 511.5925 526.4065 1269.454  1000
> 
> massFactory3 <- s$do("org.ddahl.shallot.parameter.Mass")$factory(1.0,3.0,s$do("org.apache.commons.math3.random.RandomDataGenerator")$new())
> s %~% "3+4"
[1] 7
> 
> scalap(s,"org.ddahl.shallot.parameter.Mass")
class/object org.ddahl.shallot.parameter.Mass not found.
> mass <- s$do("org.ddahl.shallot.parameter.Mass")$apply(3.4)
> massFactory1 <- s$do("org.ddahl.shallot.parameter.Mass")$factory(mass)
> massFactory2 <- s$do("org.ddahl.shallot.parameter.Mass")$factory(3.0)
> massFactory3 <- s$do("org.ddahl.shallot.parameter.Mass")$factory(1.0,3.0,rdg)
> massFactory3$apply()$logValue()
[1] -1.538674
> massFactory3$apply()$logValue()
[1] -3.159454
> massFactory3$apply()$logValue()
[1] -1.212726
> 
> 
> 
> s %~% '
+ class Bob {
+ 
+   val a = 3.0
+   var b = 4.0
+ 
+   def sum(c: Int) = { a + b + c }
+ 
+ }
+ '
ScalaInterpreterReference... res10: org.ddahl.shallot.parameter.Mass => Double
> 
> d <- s$do("Bob")$new()
> d[['type']]                           # Note the weird 'iw$' prepended to 'Bob'
[1] "iw$Bob"
> tryCatch(d$b(),error=function(e) e)   # Doesn't work
java.lang.AssertionError: assertion failed: class EmpiricalDistribution: <none>
	at scala.tools.nsc.symtab.classfile.ClassfileParser.parseMethod(ClassfileParser.scala:582)
	at scala.tools.nsc.symtab.classfile.ClassfileParser.scala$tools$nsc$symtab$classfile$ClassfileParser$$queueLoad$1(ClassfileParser.scala:483)
	at scala.tools.nsc.symtab.classfile.ClassfileParser$$anonfun$parseClass$1.apply$mcV$sp(ClassfileParser.scala:493)
	at scala.tools.nsc.symtab.classfile.ClassfileParser.parseClass(ClassfileParser.scala:498)
	at scala.tools.nsc.symtab.classfile.ClassfileParser.parse(ClassfileParser.scala:139)
	at scala.tools.nsc.symtab.SymbolLoaders$ClassfileLoader$$anonfun$doComplete$2.apply$mcV$sp(SymbolLoaders.scala:347)
	at scala.tools.nsc.symtab.SymbolLoaders$ClassfileLoader$$anonfun$doComplete$2.apply(SymbolLoaders.scala:347)
	at scala.tools.nsc.symtab.SymbolLoaders$ClassfileLoader$$anonfun$doComplete$2.apply(SymbolLoaders.scala:347)
	at scala.reflect.internal.SymbolTable.enteringPhase(SymbolTable.scala:235)
	at scala.tools.nsc.symtab.SymbolLoaders$ClassfileLoader.doComplete(SymbolLoaders.scala:347)
	at scala.tools.nsc.symtab.SymbolLoaders$SymbolLoader.complete(SymbolLoaders.scala:211)
	at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1514)
	at scala.reflect.internal.Symbols$Symbol.initialize(Symbols.scala:1659)
	at scala.tools.nsc.symtab.SymbolLoaders$moduleClassLoader$.doComplete(SymbolLoaders.scala:373)
	at scala.tools.nsc.symtab.SymbolLoaders$SymbolLoader.complete(SymbolLoaders.scala:211)
	at scala.tools.nsc.symtab.SymbolLoaders$SymbolLoader.load(SymbolLoaders.scala:227)
	at scala.reflect.internal.Symbols$Symbol.typeParams(Symbols.scala:1733)
	at scala.reflect.internal.Importers$StandardImporter.recreatedSymbolCompleter(Importers.scala:72)
	at scala.reflect.internal.Importers$StandardImporter.recreateSymbol(Importers.scala:138)
	at scala.reflect.internal.Importers$StandardImporter.scala$reflect$internal$Importers$StandardImporter$$cachedRecreateSymbol$1(Importers.scala:145)
	at scala.reflect.internal.Importers$StandardImporter.recreateOrRelink$1(Importers.scala:193)
	at scala.reflect.internal.Importers$StandardImporter.importSymbol(Importers.scala:210)
	at scala.reflect.internal.Importers$StandardImporter$$anonfun$7.apply(Importers.scala:103)
	at scala.reflect.internal.Importers$StandardImporter$$anonfun$7.apply(Importers.scala:103)
	at scala.reflect.internal.Importers$StandardImporter.linkReferenced$1(Importers.scala:96)
	at scala.reflect.internal.Importers$StandardImporter.recreateSymbol(Importers.scala:103)
	at scala.reflect.internal.Importers$StandardImporter.scala$reflect$internal$Importers$StandardImporter$$cachedRecreateSymbol$1(Importers.scala:145)
	at scala.reflect.internal.Importers$StandardImporter.recreateOrRelink$1(Importers.scala:193)
	at scala.reflect.internal.Importers$StandardImporter.importSymbol(Importers.scala:210)
	at scala.reflect.internal.Importers$StandardImporter$$anonfun$recreateType$4.apply(Importers.scala:248)
	at scala.reflect.internal.Importers$StandardImporter$$anonfun$recreateType$4.apply(Importers.scala:248)
	at scala.reflect.internal.Scopes$Scope.foreach(Scopes.scala:373)
	at scala.reflect.internal.Importers$StandardImporter.recreateType(Importers.scala:248)
	at scala.reflect.internal.Importers$StandardImporter.importType(Importers.scala:284)
	at scala.reflect.internal.Importers$StandardImporter$$anon$1.complete(Importers.scala:75)
	at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1514)
	at scala.reflect.runtime.SynchronizedSymbols$SynchronizedSymbol$$anon$1.scala$reflect$runtime$SynchronizedSymbols$SynchronizedSymbol$$super$info(SynchronizedSymbols.scala:174)
	at scala.reflect.runtime.SynchronizedSymbols$SynchronizedSymbol$$anonfun$info$1.apply(SynchronizedSymbols.scala:127)
	at scala.reflect.runtime.SynchronizedSymbols$SynchronizedSymbol$$anonfun$info$1.apply(SynchronizedSymbols.scala:127)
	at scala.reflect.runtime.Gil$class.gilSynchronized(Gil.scala:19)
	at scala.reflect.runtime.JavaUniverse.gilSynchronized(JavaUniverse.scala:16)
	at scala.reflect.runtime.SynchronizedSymbols$SynchronizedSymbol$class.gilSynchronizedIfNotThreadsafe(SynchronizedSymbols.scala:123)
	at scala.reflect.runtime.SynchronizedSymbols$SynchronizedSymbol$$anon$1.gilSynchronizedIfNotThreadsafe(SynchronizedSymbols.scala:174)
	at scala.reflect.runtime.SynchronizedSymbols$SynchronizedSymbol$class.info(SynchronizedSymbols.scala:127)
	at scala.reflect.runtime.SynchronizedSymbols$SynchronizedSymbol$$anon$1.info(SynchronizedSymbols.scala:174)
	at scala.reflect.internal.Importers$StandardImporter.recreateOrRelink$1(Importers.scala:167)
	at scala.reflect.internal.Importers$StandardImporter.importSymbol(Importers.scala:210)
	at scala.reflect.internal.Importers$StandardImporter.recreateType(Importers.scala:224)
	at scala.reflect.internal.Importers$StandardImporter.importType(Importers.scala:284)
	at scala.reflect.internal.Importers$StandardImporter$$anonfun$recreateType$1.apply(Importers.scala:224)
	at scala.reflect.internal.Importers$StandardImporter$$anonfun$recreateType$1.apply(Importers.scala:224)
	at scala.collection.immutable.List.map(List.scala:273)
	at scala.reflect.internal.Importers$StandardImporter.recreateType(Importers.scala:224)
	at scala.reflect.internal.Importers$StandardImporter.importType(Importers.scala:284)
	at scala.reflect.internal.Importers$StandardImporter$$anon$1.complete(Importers.scala:75)
	at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1514)
	at scala.reflect.runtime.SynchronizedSymbols$SynchronizedSymbol$$anon$15.scala$reflect$runtime$SynchronizedSymbols$SynchronizedSymbol$$super$info(SynchronizedSymbols.scala:198)
	at scala.reflect.runtime.SynchronizedSymbols$SynchronizedSymbol$$anonfun$info$1.apply(SynchronizedSymbols.scala:127)
	at scala.reflect.runtime.SynchronizedSymbols$SynchronizedSymbol$$anonfun$info$1.apply(SynchronizedSymbols.scala:127)
	at scala.reflect.runtime.Gil$class.gilSynchronized(Gil.scala:19)
	at scala.reflect.runtime.JavaUniverse.gilSynchronized(JavaUniverse.scala:16)
	at scala.reflect.runtime.SynchronizedSymbols$SynchronizedSymbol$class.gilSynchronizedIfNotThreadsafe(SynchronizedSymbols.scala:123)
	at scala.reflect.runtime.SynchronizedSymbols$SynchronizedSymbol$$anon$15.gilSynchronizedIfNotThreadsafe(SynchronizedSymbols.scala:198)
	at scala.reflect.runtime.SynchronizedSymbols$SynchronizedSymbol$class.info(SynchronizedSymbols.scala:127)
	at scala.reflect.runtime.SynchronizedSymbols$SynchronizedSymbol$$anon$15.info(SynchronizedSymbols.scala:198)
	at scala.reflect.runtime.JavaMirrors$JavaMirror$JavaFieldMirror.<init>(JavaMirrors.scala:277)
	at scala.reflect.runtime.JavaMirrors$JavaMirror$JavaInstanceMirror.reflectField(JavaMirrors.scala:244)
	at scala.reflect.runtime.JavaMirrors$JavaMirror$JavaInstanceMirror.reflectField(JavaMirrors.scala:233)
	at scala.tools.nsc.interpreter.IMain$$anonfun$valueOfTerm$1.value$2(IMain.scala:1119)
	at scala.tools.nsc.interpreter.IMain$$anonfun$valueOfTerm$1.apply(IMain.scala:1124)
	at scala.tools.nsc.interpreter.IMain$$anonfun$valueOfTerm$1.apply(IMain.scala:1113)
	at scala.reflect.internal.SymbolTable.enteringPhase(SymbolTable.scala:235)
	at scala.reflect.internal.SymbolTable.exitingPhase(SymbolTable.scala:256)
	at scala.tools.nsc.interpreter.IMain.valueOfTerm(IMain.scala:1113)
	at org.ddahl.rscala.ScalaServer.storeFunction(ScalaServer.scala:55)
	at org.ddahl.rscala.ScalaServer.doDef(ScalaServer.scala:158)
	at org.ddahl.rscala.ScalaServer.org$ddahl$rscala$ScalaServer$$heart(ScalaServer.scala:563)
	at org.ddahl.rscala.ScalaServer.run(ScalaServer.scala:591)
	at org.ddahl.rscala.Main$.delayedEndpoint$org$ddahl$rscala$Main$1(Main.scala:5)
	at org.ddahl.rscala.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:35)
	at scala.App$class.main(App.scala:76)
	at org.ddahl.rscala.Main$.main(Main.scala:3)
	at org.ddahl.rscala.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)
	at scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
java.lang.AssertionError: assertion failed: class EmpiricalDistribution: <none>
<console>:12: error: not found: type iw$Bob
       (rscalaReference: iw$Bob) => { rscalaReference.b }
                         ^
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Evaluation error.>
> 
> d[['type']] <- "Bob"     # Cast it to be 'Bob'
> d$b()                    # Now it does
[1] 4
> 
> d$sum(as.integer(4))
[1] 11
> m <- d$sum(as.integer(5),evaluate=FALSE)
> 
> m(3)                                    # Casting is not necessary here
[1] 10
> d$sum(as.integer(3))                    # But it is here
[1] 10
> tryCatch(d$sum(3),error=function(e) e)  # and here
java.lang.RuntimeException: Parse error in 'def'.
	at org.ddahl.rscala.ScalaServer.doDef(ScalaServer.scala:153)
	at org.ddahl.rscala.ScalaServer.org$ddahl$rscala$ScalaServer$$heart(ScalaServer.scala:563)
	at org.ddahl.rscala.ScalaServer.run(ScalaServer.scala:591)
	at org.ddahl.rscala.Main$.delayedEndpoint$org$ddahl$rscala$Main$1(Main.scala:5)
	at org.ddahl.rscala.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:35)
	at scala.App$class.main(App.scala:76)
	at org.ddahl.rscala.Main$.main(Main.scala:3)
	at org.ddahl.rscala.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)
	at scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
java.lang.RuntimeException: Parse error in 'def'.
<console>:13: error: type mismatch;
 found   : Double
 required: Int
       (rscalaReference: Bob,x1: Double) => { rscalaReference.sum(x1) }
                                                                  ^
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Evaluation error.>
> 
> 
> proc.time()
   user  system elapsed 
  3.092   0.988  10.262 
