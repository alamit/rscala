
R version 3.2.4 (2016-03-10) -- "Very Secure Dishes"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> 
> serialize <- as.logical(Sys.getenv("RSCALA_SERIALIZE"))
> output <- as.logical(Sys.getenv("RSCALA_OUTPUT"))
> version <- Sys.getenv("RSCALA_SCALA_VERSION")
> s <- scala(serialize=serialize,stdout=output,stderr=output)
> if ( version != s %~% "scala.util.Properties.versionNumberString" ) stop("Version mismatch.")
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   c(f(x),g(x))
+ }
> 
> doit0(rnorm(10))
[1] 0.05067312 0.74823148
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- s$def('x: Array[Double]','
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ ')
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr         min          lq         mean      median          uq
 doit0(rnorm(10))      50.808     127.195     151.6177     143.994     198.521
 doit1(rnorm(10)) 2592253.936 5802908.028 7108481.4319 7004388.263 8312321.053
 doit2(rnorm(10)) 1989183.273 2889501.365 3752472.8917 3127870.738 4191332.229
 doit3(rnorm(10))    8715.682   13302.148   84830.9448   39742.772  135775.365
          max neval
      304.174    10
 12085655.088    10
  7608085.238    10
   323634.807    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq        mean    median        uq        max
 doit0(rnorm(10))   42.362   60.0355    98.87054    85.202   116.724   3522.829
 doit3(rnorm(10)) 2746.668 4173.3285 18465.08067 13088.383 22810.253 229905.007
 neval
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr       min        lq      mean    median        uq       max
 doit0(rnorm(10))  200.5052  200.5596  203.7330  202.6957  207.4098  207.4948
 doit1(rnorm(10)) 1527.8761 1633.2089 1927.8614 1856.4660 2215.4350 2406.3206
 doit2(rnorm(10))  855.0126  907.5316 1814.1980 1576.2057 1887.2567 3844.9832
 doit3(rnorm(10))  204.3641  204.5412  214.2092  211.3223  212.7306  238.0881
 neval
     5
     5
     5
     5
> 
> 
