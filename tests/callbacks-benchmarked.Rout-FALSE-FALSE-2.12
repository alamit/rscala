> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     43.959     73.968    406.7881     94.871    114.646
 doit1(rnorm(10)) 377140.192 537447.713 681555.0363 687734.619 813011.216
 doit2(rnorm(10)) 219782.511 288982.277 406560.9133 313935.211 551851.638
 doit3(rnorm(10))   2576.545   3291.859   4565.1439   3633.454   3909.887
 doit4(rnorm(10))   1033.568   1773.165   2132.1483   2088.784   2303.326
         max neval
    3271.270    10
 1094811.187    10
  780054.532    10
   13774.748    10
    4037.985    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median        uq       max
 doit0(rnorm(10))   17.552   26.5015   39.10597   34.2530   46.0095   887.778
 doit3(rnorm(10)) 1147.993 1327.6535 1754.02343 1514.8030 1877.9865 28675.638
 doit4(rnorm(10))  564.844  708.7995  896.80813  767.1235  942.5310  5738.879
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3555 200.3601 200.5356 200.3811 200.3826 201.1986     5
 doit1(rnorm(10)) 428.4424 440.4448 530.0591 552.1421 612.6185 616.6479     5
 doit2(rnorm(10)) 358.7560 421.8937 456.4501 441.3993 519.6848 540.5169     5
 doit3(rnorm(10)) 203.0972 203.4210 204.3543 203.5265 203.7986 207.9284     5
 doit4(rnorm(10)) 201.7591 201.9665 203.0034 201.9923 202.5100 206.7891     5
> 
> 
