> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     70.832     84.646    591.0382    127.6445    158.199
 doit1(rnorm(10)) 444543.224 525943.862 770655.0451 827353.1880 898604.955
 doit2(rnorm(10)) 241383.937 335852.191 449696.5391 378885.0765 585458.844
 doit3(rnorm(10))   2821.025   4176.493   8970.8253   4900.2475  14873.824
 doit4(rnorm(10))   1261.440   1621.016   3749.1254   2538.7130   3952.714
        max neval
    4821.87    10
 1146513.14    10
  749891.46    10
   21258.01    10
   14188.15    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean   median       uq       max
 doit0(rnorm(10))   32.379   55.154   72.13461   65.181   92.913   202.424
 doit3(rnorm(10)) 2050.615 2268.787 3284.41439 2731.619 3851.631 86631.642
 doit4(rnorm(10))  948.612 1145.292 1771.01144 1444.204 2082.075 23825.449
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4301 200.4308 200.7667 200.4367 200.4589 202.0768     5
 doit1(rnorm(10)) 717.2510 760.5220 809.6725 814.9719 872.4927 883.1247     5
 doit2(rnorm(10)) 539.3871 613.8574 675.0183 663.9948 751.5198 806.3325     5
 doit3(rnorm(10)) 204.3491 205.4178 207.0986 205.9035 207.3347 212.4881     5
 doit4(rnorm(10)) 202.6193 202.8676 204.9787 203.3670 207.1982 208.8414     5
> 
> 
