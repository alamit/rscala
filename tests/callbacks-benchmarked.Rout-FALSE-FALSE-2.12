> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-04-25 r72623) # ramah # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     49.712     95.310    445.7038    110.8305    121.849
 doit1(rnorm(10)) 479239.325 556080.144 753005.3360 667927.2065 865384.226
 doit2(rnorm(10)) 221216.313 314918.260 476796.9093 401888.7240 691621.949
 doit3(rnorm(10))   3555.582   3606.053   5976.9109   3861.2590   4300.405
 doit4(rnorm(10))   1044.805   1449.752   7726.0709   1915.6050   5025.614
         max neval
    3547.718    10
 1160029.432    10
  899301.834    10
   24740.217    10
   41883.159    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median        uq       max
 doit0(rnorm(10))   17.957   27.5910   38.26975   34.4250   44.3745   878.125
 doit3(rnorm(10)) 1166.771 1383.0585 1781.15613 1544.5385 1884.8400 31847.967
 doit4(rnorm(10))  576.847  727.5325  884.47531  791.7955  941.3280  8500.882
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3686 200.3845 200.3891 200.3904 200.3962 200.4057     5
 doit1(rnorm(10)) 489.5269 525.4642 563.0618 533.0132 598.6852 668.6196     5
 doit2(rnorm(10)) 378.0617 392.9421 479.7002 527.1188 547.3121 553.0663     5
 doit3(rnorm(10)) 202.9454 203.1503 203.3688 203.3643 203.6251 203.7588     5
 doit4(rnorm(10)) 201.6381 201.6823 202.3465 201.6925 202.6480 204.0713     5
> 
> 
