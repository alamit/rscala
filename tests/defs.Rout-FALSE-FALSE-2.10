> source("common.R",print.eval=TRUE)
#  # R version 3.3.2 (2016-10-31) # sidon # FALSE # FALSE
> 
> 
> see <- "David"
> mkFunc1 <- function() {
+   see <- "B."
+   x <- "Milly"
+   print(environment())
+   r <- s$def(I("Mack"),I("Bob")) %~% '
+     x1+" "+x2+" "+R.getS0("see")
+   '
+   r
+ }
> y1 <- mkFunc1()
<environment: 0x27a26d0>
> identical(y1("Lisa","Dahl"),"Lisa Dahl B.")
[1] TRUE
> 
> 
> mkFunc2 <- function() {
+   see <- "MMMM."
+   x <- "Milly"
+   r <- s$def(x=I("Mack"),y=I("Bob")) %.~% '
+       x+" "+y+" "+R.getS0("see")
+   '
+   r
+ }
> y2 <- mkFunc2()
> identical(y2("Lisa","Dahl")$toString(),"Lisa Dahl MMMM.")
[1] TRUE
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 230842 12.4     460000 24.6   350000 18.7
Vcells 334313  2.6     786432  6.0   786350  6.0
> 
> 
> 
> func1 <- function() {
+   see <- "Knudsen"
+   y1("Lisa","Dahl")
+ }
> identical(func1(),"Lisa Dahl B.")
[1] TRUE
> 
> 
> ####
> 
> 
> # Realistic timing
> system.time(e <- s$def(x=I(0),y=I(4L),name=I("dog")) %~% '
+   name + " " + ( x + y )
+ ')
   user  system elapsed 
   0.00    0.00    0.71 
> 
> # Taking advantage of caching
> system.time(f <- s$def(x=I(0),y=I(4L),name=I("dog")) %~% '
+   name + " " + ( x + y )
+ ')
   user  system elapsed 
  0.004   0.000   0.001 
> 
> ####
> 
> nextDouble <- s$def(rng=s$null("scala.util.Random")) %~% "rng.nextDouble()"
> 
> mkRNG1 <- s$def() %.~% 'new scala.util.Random()'
> mkRNG2 <- function() s %.~% 'new scala.util.Random()'
> 
> rng1 <- mkRNG1()
> rng2 <- mkRNG2()
> 
> rng1$nextInt(I(10L))
[1] 2
> rng2$nextInt(I(10L))
[1] 6
> 
> str <- rng1$toString(.EVALUATE=TRUE,.AS.REFERENCE=TRUE)
> str$length()
[1] 25
> 
> nd0 <- rng1$nextDouble(.EVALUATE=FALSE)
> nd1 <- s$def() %~% 'R.cached("@{toString(rng1)}").asInstanceOf[@{rng1[[\'type\']]}].nextDouble()'
> nd2 <- s$def() %~% '@{rng2}.nextDouble()'
> 
> library("microbenchmark")
> 
> microbenchmark(
+   runif(1),
+   rng1$nextDouble(),
+   rng2$nextDouble(),
+   nd0(),
+   nd1(),
+   nd2(),
+   times=500
+ )
Unit: microseconds
              expr      min        lq       mean    median        uq        max
          runif(1)    1.512    9.2350   11.39961   11.5855   13.5005     64.140
 rng1$nextDouble() 1145.580 1841.1940 2349.32714 1878.3400 1953.5490  24007.868
 rng2$nextDouble() 1028.626 1697.6010 2828.93556 1733.3645 1796.1245 349688.188
             nd0()  182.421  344.3605  507.27888  360.6055  383.2730   9232.169
             nd1()  169.295  344.6965  503.29074  363.4060  385.7825  12071.357
             nd2()  191.545  331.4350  458.19978  342.0370  358.0230   7825.947
 neval
   500
   500
   500
   500
   500
   500
> 
> ####
> 
> s$do("scala.util.Random")$nextDouble()
[1] 0.004186817
> m <- s$do("scala.util.Random")$new(I(342L),.EVALUATE=FALSE)
> m(I(5L))$nextDouble()
[1] 0.7305199
> 
> s$.scala.util.Random$nextDouble()
[1] 0.4264745
> m <- s$.scala.util.Random$new(I(342L),.EVALUATE=FALSE)
> m(5L)$nextDouble(.EVALUATE=FALSE)   # Wrapping with I() is not needed.
function(): Double = { // Scala implementation; .AS.REFERENCE = NA
  R.cached(".4").asInstanceOf[scala.util.Random].nextDouble
}
> m(5L)$nextDouble()
[1] 0.7305199
> 
> s$'.Array[Int]'$new(I(5L))
[1] 0 0 0 0 0
> s$do("Array[Int]")$new(I(5L))
[1] 0 0 0 0 0
> 
> ####
> 
> s$a <- 1:10
> a <- s$.a
> a$apply(I(3L))
[1] 4
> tryCatch(a$apply(3L),error=function(e) e)
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> 
> s$do("scala.util.Random")$nextDouble()
[1] 0.8391601
> s$.scala.util.Random$nextDouble()
[1] 0.4814044
> 
> s %~% 'import scala.util.Random'
ScalaInterpreterReference... res22: () => Int
> s$.Random$nextDouble()
[1] 0.7981024
> 
> a <- s$def() %~% 'Random.nextDouble'
> a()
[1] 0.8355629
> 
> s$.scala.util.Random
ScalaInterpreterItem
> a <- ( s$def() %~% 'scala.util.Random' )()
> a$nextDouble(.EVALUATE=TRUE)
[1] 0.5800929
> 
> ####
> 
> f <- s$def(x=s$null("(Int,Int)")) %~% 'x._1 + x._2'
> g <- s %~% "(300,400)"
> f(g)
[1] 700
> f(s %~% "(30,40)")
[1] 70
> 
> f2 <- s$def() %~% 'println("Yes")'
> f2()
> capture.output(f2())
character(0)
> 
> a <- s %.~% "(300,234)"
> f1 <- s$def(x=s$null("(Int,Int)"),y=numeric()) %~% 'x._1 + x._2 + y.sum'
> f1(a,c(2,3,4,6))
[1] 549
> 
> f1 <- s$def(x=s$null("(Int,Int)"),y=s$null("Array[Double]")) %~% 'x._1 + x._2 + y.sum'
> b <- s %.~% "Array[Double](2,3,4,5)"
> f1(a,b)
[1] 548
> 
> ####
> 
> (s$def() %~% 'println("Yes")')()
> (s$def() %~% '0')()
[1] 0
> (s$def() %~% 'null')()
> 
> ####
> 
> tryCatch((s$def() %~% 'a+b')(),error = function(e) e)
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((s$def() %~% 'a+')(),error = function(e) e)
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((s$def() %~% 'import org.asdfad')(),error = function(e) {e})
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((s$def() %~% 'throw new RuntimeException()')(),error = function(e) {e})
<simpleError in (s$def() %~% "throw new RuntimeException()")(): Invocation error.>
> s %~% "5+6"   # Everything's still okay!
[1] 11
> 
> 
