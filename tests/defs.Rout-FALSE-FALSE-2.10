> source("common.R",print.eval=TRUE)
# R version 3.3.3 (2017-03-06) # ramah # FALSE # FALSE
> 
> 
> see <- "David"
> mkFunc1 <- function() {
+   see <- "B."
+   x <- "Milly"
+   print(environment())
+   r <- s$def(I("Mack"),I("Bob")) %~% '
+     x1+" "+x2+" "+R.getS0("see")
+   '
+   r
+ }
> y1 <- mkFunc1()
<environment: 0x1b03fd8>
> identical(y1("Lisa","Dahl"),"Lisa Dahl B.")
[1] TRUE
> 
> 
> mkFunc2 <- function() {
+   see <- "MMMM."
+   x <- "Milly"
+   r <- s$def(x=I("Mack"),y=I("Bob")) %.~% '
+       x+" "+y+" "+R.getS0("see")
+   '
+   r
+ }
> y2 <- mkFunc2()
> identical(y2("Lisa","Dahl")$toString(),"Lisa Dahl MMMM.")
[1] TRUE
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 231014 12.4     460000 24.6   350000 18.7
Vcells 334432  2.6     786432  6.0   786371  6.0
> 
> 
> 
> func1 <- function() {
+   see <- "Knudsen"
+   y1("Lisa","Dahl")
+ }
> identical(func1(),"Lisa Dahl B.")
[1] TRUE
> 
> 
> ####
> 
> 
> # Realistic timing
> system.time(e <- s$def(x=I(0),y=I(4L),name=I("dog")) %~% '
+   name + " " + ( x + y )
+ ')
   user  system elapsed 
  0.000   0.004   0.412 
> 
> # Taking advantage of caching
> system.time(f <- s$def(x=I(0),y=I(4L),name=I("dog")) %~% '
+   name + " " + ( x + y )
+ ')
   user  system elapsed 
  0.000   0.000   0.002 
> 
> ####
> 
> nextDouble <- s$def(rng=s$null("scala.util.Random")) %~% "rng.nextDouble()"
> 
> mkRNG1 <- s$def() %.~% 'new scala.util.Random()'
> mkRNG2 <- function() s %.~% 'new scala.util.Random()'
> 
> rng1 <- mkRNG1()
> rng2 <- mkRNG2()
> 
> rng1$nextInt(I(10L))
[1] 0
> rng2$nextInt(I(10L))
[1] 3
> 
> str <- rng1$toString(.EVALUATE=TRUE,.AS.REFERENCE=TRUE)
> str$length()
[1] 26
> 
> nd0 <- rng1$nextDouble(.EVALUATE=FALSE)
> nd1 <- s$def() %~% 'R.cached("@{toString(rng1)}").asInstanceOf[@{rng1[[\'type\']]}].nextDouble()'
> nd2 <- s$def() %~% '@{rng2}.nextDouble()'
> 
> library("microbenchmark")
> 
> microbenchmark(
+   runif(1),
+   rng1$nextDouble(),
+   rng2$nextDouble(),
+   nd0(),
+   nd1(),
+   nd2(),
+   times=500
+ )
Unit: nanoseconds
              expr    min       lq        mean    median      uq      max neval
          runif(1)    919   3791.0    6866.302    6634.5    8423    68436   500
 rng1$nextDouble() 884149 982411.0 1417992.522 1058974.0 1499644 22762273   500
 rng2$nextDouble() 831420 909521.0 1467864.108  991771.5 1597806 89469324   500
             nd0() 152160 191501.0  259895.920  210616.0  264016  2226375   500
             nd1() 151104 190819.5  280009.804  212042.0  317579  2079951   500
             nd2() 160517 184254.5  255908.406  196611.0  255781  3084423   500
> 
> ####
> 
> s$.scala.util.Random$nextDouble()
[1] 0.7398977
> m <- s$.scala.util.Random$new(I(342L),.EVALUATE=FALSE)
> m(23436)$nextDouble()
[1] 0.8011135
> m(63202)$nextDouble()
[1] 0.8263897
> m(93222)$nextDouble()
[1] 0.4889048
> m(93332)$nextDouble()
[1] 0.5044919
> 
> n <- m(5)$nextDouble(.EVALUATE=FALSE)   # Wrapping with I() is not needed.
> n()
[1] 0.7305199
> n()
[1] 0.08825841
> n()
[1] 0.4889045
> 
> s$'.Array[Int]'$new(I(5L))
[1] 0 0 0 0 0
> 
> ####
> 
> s$a <- 1:10
> a <- s$.a
> a$apply(I(3L))
[1] 4
> tryCatch(a$apply(3L),error=function(e) e)
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> 
> s$.scala.util.Random$nextDouble()
[1] 0.1260684
> s$.scala.util.Random$nextDouble()
[1] 0.7060247
> s$do("scala.util.Random")$nextDouble()
[1] 0.8117948
Warning message:
In s$do("scala.util.Random") :
  Syntax "s$do('scala.util.Random')" is deprecated.  Use "s$.scala.util.Random" instead.
> 
> s %~% 'import scala.util.Random'
ScalaInterpreterReference... res24: () => Int
> s$.Random$nextDouble()
[1] 0.8532451
> 
> a <- s$def() %~% 'Random.nextDouble'
> a()
[1] 0.4862301
> 
> s$.scala.util.Random
ScalaInterpreterItem
> a <- ( s$def() %~% 'scala.util.Random' )()
> a$nextDouble(.EVALUATE=TRUE)
[1] 0.3329581
> 
> ####
> 
> f <- s$def(x=s$null("(Int,Int)")) %~% 'x._1 + x._2'
> g <- s %~% "(300,400)"
> f(g)
[1] 700
> f(s %~% "(30,40)")
[1] 70
> 
> f2 <- s$def() %~% 'println("Yes")'
> f2()
> capture.output(f2())
character(0)
> 
> a <- s %.~% "(300,234)"
> f1 <- s$def(x=s$null("(Int,Int)"),y=numeric()) %~% 'x._1 + x._2 + y.sum'
> f1(a,c(2,3,4,6))
[1] 549
> 
> f1 <- s$def(x=s$null("(Int,Int)"),y=s$null("Array[Double]")) %~% 'x._1 + x._2 + y.sum'
> b <- s %.~% "Array[Double](2,3,4,5)"
> f1(a,b)
[1] 548
> 
> ####
> 
> (s$def() %~% 'println("Yes")')()
> (s$def() %~% '0')()
[1] 0
> (s$def() %~% 'null')()
> 
> ####
> 
> tryCatch((s$def() %~% 'a+b')(),error = function(e) e)
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((s$def() %~% 'a+')(),error = function(e) e)
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((s$def() %~% 'import org.asdfad')(),error = function(e) {e})
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((s$def() %~% 'throw new RuntimeException()')(),error = function(e) {e})
<simpleError in (s$def() %~% "throw new RuntimeException()")(): Invocation error.>
> s %~% "5+6"   # Everything's still okay!
[1] 11
> 
> 
