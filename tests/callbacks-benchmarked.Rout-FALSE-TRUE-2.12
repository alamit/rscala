> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     67.867     77.104    609.9697    134.2435    184.892
 doit1(rnorm(10)) 505178.011 608787.853 797397.9789 791322.2940 849783.021
 doit2(rnorm(10)) 278470.814 368005.577 524792.2754 474761.8970 650905.848
 doit3(rnorm(10))   2767.227   3044.985   4458.6508   4408.8315   4982.380
 doit4(rnorm(10))   1191.446   1540.443   3132.5194   2336.4395   2586.537
         max neval
    4940.465    10
 1190381.967    10
  986149.308    10
    7143.462    10
   12541.751    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq     mean   median        uq       max neval
 doit0(rnorm(10))   32.868   60.020   94.642   72.659   99.2175  10935.24  1000
 doit3(rnorm(10)) 2100.241 2458.125 3912.731 3639.553 4016.2015 143138.58  1000
 doit4(rnorm(10))  976.530 1228.984 2055.863 1844.165 2177.7270  29254.26  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4667 200.4711 200.5045 200.4801 200.5431 200.5616     5
 doit1(rnorm(10)) 758.7207 798.9359 888.1261 916.0209 978.0590 988.8938     5
 doit2(rnorm(10)) 533.2499 598.7939 619.9015 631.8081 667.6709 667.9850     5
 doit3(rnorm(10)) 204.8591 205.1013 210.9194 207.3374 211.4946 225.8044     5
 doit4(rnorm(10)) 202.7701 203.2629 204.1596 203.4550 203.8296 207.4804     5
> 
> 
