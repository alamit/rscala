> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     53.950     85.524    341.7162    102.911    111.992
 doit1(rnorm(10)) 466160.670 627250.998 758097.5454 762920.755 853116.252
 doit2(rnorm(10)) 228494.105 334397.957 490943.2770 367308.074 657757.250
 doit3(rnorm(10))   2718.961   3310.894   3479.3626   3524.773   3663.408
 doit4(rnorm(10))   1836.633   1862.215   2438.4952   1888.094   2272.735
         max neval
    2566.073    10
 1133883.672    10
 1106709.589    10
    4181.827    10
    4847.744    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median        uq       max
 doit0(rnorm(10))   17.717   27.4950   43.78524   35.2465   51.2735  1771.172
 doit3(rnorm(10)) 1147.467 1316.7330 1972.92939 1514.3695 2302.6150 33198.970
 doit4(rnorm(10))  557.608  703.0085 1020.45357  801.8100 1143.6505 13176.972
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3498 200.3679 200.3815 200.3771 200.3918 200.4208     5
 doit1(rnorm(10)) 447.6681 501.5830 544.0250 525.9049 608.6684 636.3006     5
 doit2(rnorm(10)) 346.5710 371.0959 427.9489 435.2675 467.6061 519.2039     5
 doit3(rnorm(10)) 203.0661 203.2302 203.7667 203.4410 203.8596 205.2366     5
 doit4(rnorm(10)) 201.5097 201.7389 201.9011 201.8474 202.1729 202.2367     5
> 
> 
