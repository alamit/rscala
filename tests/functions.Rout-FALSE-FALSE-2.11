> jars <- c("commons-math3-3.2.jar","shallot.jar")
> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # FALSE # FALSE
> 
> tryCatch(s %~% 'new org.apache.commons.math3.random.EmpiricalDistribution()',error=function(e) e)   # Scala 2.11.x class loader is weird.  This line avoid subsequent problems.
ScalaInterpreterReference... res1: org.apache.commons.math3.random.EmpiricalDistribution
> 
> 
> scalap(s,"org.apache.commons.math3.random.RandomDataGenerator")
> s$.org.apache.commons.math3.random.RandomDataGenerator
ScalaInterpreterItem
> rdg <- s$.org.apache.commons.math3.random.RandomDataGenerator$new()
> 
> rdg$reSeed(39234L)
> rexp <- rdg$nextExponential(2,.EVALUATE=FALSE)
> 
> library(microbenchmark)
> options(width=120)
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr      min       lq      mean    median        uq      max neval
 rdg$nextExponential(4) 1029.829 1096.895 1364.6621 1150.5000 1294.9850 30572.96  1000
                rexp(4)  200.328  256.559  334.2082  269.7475  304.7035 16874.22  1000
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr      min       lq      mean    median        uq       max neval
 rdg$nextExponential(4) 1022.607 1100.278 1436.1617 1185.4845 1599.1260 38000.386  1000
                rexp(4)  234.847  254.955  314.9109  272.8285  341.5545  5104.717  1000
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr      min        lq      mean   median       uq      max neval
 rdg$nextExponential(4) 1037.240 1139.3845 1925.6036 2014.412 2300.096 45380.29  1000
                rexp(4)  233.303  261.5565  438.9476  407.822  552.439  6757.52  1000
> 
> s$.org.ddahl.shallot.parameter.Mass
ScalaInterpreterItem
> massFactory3 <- s$.org.ddahl.shallot.parameter.Mass$factory(1.0,3.0,rdg)
> s %~% "3+4"
[1] 7
> 
> mass <- s$.org.ddahl.shallot.parameter.Mass$apply(3.4)
> massFactory1 <- s$.org.ddahl.shallot.parameter.Mass$factory(mass)
> massFactory2 <- s$.org.ddahl.shallot.parameter.Mass$factory(3.0)
> massFactory3 <- s$.org.ddahl.shallot.parameter.Mass$factory(1.0,3.0,rdg)
> massFactory3$apply()$logValue()
[1] -2.27295
> massFactory3$apply()$logValue()
[1] -3.893189
> massFactory3$apply()$logValue()
[1] -2.183371
> 
> 
> 
> s %@% '
+ class Bob {
+ 
+   val a = 3.0
+   var b = 4.0
+ 
+   def sum(c: Int) = { a + b + c }
+ 
+ }
+ '
> 
> d <- s$.Bob$new()
> d[['type']]                           # Note the weird 'iw$' prepended to 'Bob'
[1] "iw$Bob"
> tryCatch(d$b(),error=function(e) e)   # Doesn't work
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> 
> d[['type']] <- "Bob"     # Cast it to be 'Bob'
> d$b()                    # Now it does
[1] 4
> 
> d$sum(4L)
[1] 11
> m <- d$sum(5L,.EVALUATE=FALSE)
> 
> m(3)                                                   # Casting is not necessary here
[1] 10
> d$sum(as.integer(3))                                   # But it is here
[1] 10
> 
> 
