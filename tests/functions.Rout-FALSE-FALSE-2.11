> jars <- c("commons-math3-3.2.jar","shallot.jar")
> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-04-25 r72623) # ramah # FALSE # FALSE
> 
> tryCatch(s %~% 'new org.apache.commons.math3.random.EmpiricalDistribution()',error=function(e) e)   # Scala 2.11.x class loader is weird.  This line avoid subsequent problems.
ScalaInterpreterReference... res1: org.apache.commons.math3.random.EmpiricalDistribution
> 
> 
> scalap(s,"org.apache.commons.math3.random.RandomDataGenerator")
> s$.org.apache.commons.math3.random.RandomDataGenerator
ScalaInterpreterItem
> rdg <- s$.org.apache.commons.math3.random.RandomDataGenerator$new()
> 
> rdg$reSeed(I(39234L))
> rexp <- rdg$nextExponential(I(2),.EVALUATE=FALSE)
> 
> library(microbenchmark)
> options(width=120)
> microbenchmark(rdg$nextExponential(I(4)),rexp(4),times=1000L)
Unit: microseconds
                      expr      min        lq      mean   median        uq       max neval
 rdg$nextExponential(I(4)) 1093.243 1214.5110 1538.5397 1314.246 1491.6735 38398.329  1000
                   rexp(4)  213.639  283.0555  366.2949  304.358  363.3895  6871.064  1000
> microbenchmark(rdg$nextExponential(I(4)),rexp(4),times=1000L)
Unit: microseconds
                      expr      min        lq      mean    median        uq       max neval
 rdg$nextExponential(I(4)) 1050.464 1184.5260 1419.4770 1247.7425 1411.6490 35079.418  1000
                   rexp(4)  204.404  273.7035  317.7354  287.5145  315.2505  5606.899  1000
> microbenchmark(rdg$nextExponential(I(4)),rexp(4),times=1000L)
Unit: microseconds
                      expr      min       lq      mean    median       uq       max neval
 rdg$nextExponential(I(4)) 1025.700 1189.231 1616.5987 1285.8150 1822.653 42580.039  1000
                   rexp(4)  202.005  272.391  371.5752  293.7825  379.847  6650.191  1000
> 
> s$.org.ddahl.shallot.parameter.Mass
ScalaInterpreterItem
> massFactory3 <- s$.org.ddahl.shallot.parameter.Mass$factory(I(1.0),I(3.0),rdg)
> s %~% "3+4"
[1] 7
> 
> mass <- s$.org.ddahl.shallot.parameter.Mass$apply(I(3.4))
> massFactory1 <- s$.org.ddahl.shallot.parameter.Mass$factory(mass)
> massFactory2 <- s$.org.ddahl.shallot.parameter.Mass$factory(I(3.0))
> massFactory3 <- s$.org.ddahl.shallot.parameter.Mass$factory(I(1.0),I(3.0),rdg)
> massFactory3$apply()$logValue()
[1] -2.27295
> massFactory3$apply()$logValue()
[1] -3.893189
> massFactory3$apply()$logValue()
[1] -2.183371
> 
> 
> 
> s %@% '
+ class Bob {
+ 
+   val a = 3.0
+   var b = 4.0
+ 
+   def sum(c: Int) = { a + b + c }
+ 
+ }
+ '
> 
> d <- s$.Bob$new()
> d[['type']]                           # Note the weird 'iw$' prepended to 'Bob'
[1] "iw$Bob"
> tryCatch(d$b(),error=function(e) e)   # Doesn't work
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> 
> d[['type']] <- "Bob"     # Cast it to be 'Bob'
> d$b()                    # Now it does
[1] 4
> 
> d$sum(I(4L))
[1] 11
> m <- d$sum(I(5L),.EVALUATE=FALSE)
> 
> m(3)                                                   # Casting is not necessary here
[1] 10
> d$sum(I(as.integer(3)))                                # But it is here
[1] 10
> 
> 
