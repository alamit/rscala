> heap.maximum <- "64M"
> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # ramah # TRUE # TRUE
> 
> tryCatch(a <- s$".Array[Double]"$new(I(20000000L)),error=function(e) e)
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.ScalaServer.doInvoke(ScalaServer.scala:127)
	at org.ddahl.rscala.ScalaServer.org$ddahl$rscala$ScalaServer$$heart(ScalaServer.scala:511)
	at org.ddahl.rscala.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(ScalaServer.scala:530)
	at org.ddahl.rscala.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply(ScalaServer.scala:530)
	at org.ddahl.rscala.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply(ScalaServer.scala:530)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
	at scala.Console$.withErr(Console.scala:92)
	at org.ddahl.rscala.ScalaServer$$anonfun$run$1.apply$mcV$sp(ScalaServer.scala:529)
	at org.ddahl.rscala.ScalaServer$$anonfun$run$1.apply(ScalaServer.scala:529)
	at org.ddahl.rscala.ScalaServer$$anonfun$run$1.apply(ScalaServer.scala:529)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
	at scala.Console$.withOut(Console.scala:65)
	at org.ddahl.rscala.ScalaServer.run(ScalaServer.scala:528)
	at org.ddahl.rscala.Main$.delayedEndpoint$org$ddahl$rscala$Main$1(Main.scala:5)
	at org.ddahl.rscala.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:35)
	at scala.App$class.main(App.scala:76)
	at org.ddahl.rscala.Main$.main(Main.scala:3)
	at org.ddahl.rscala.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)
	at scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
Caused by: java.lang.OutOfMemoryError: Java heap space
	at $line6.$read$$iw$$iw$$anonfun$1.apply(<console>:18)
	at $line6.$read$$iw$$iw$$anonfun$1.apply(<console>:16)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.ScalaServer.doInvoke(ScalaServer.scala:127)
	at org.ddahl.rscala.ScalaServer.org$ddahl$rscala$ScalaServer$$heart(ScalaServer.scala:511)
	at org.ddahl.rscala.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(ScalaServer.scala:530)
	at org.ddahl.rscala.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply(ScalaServer.scala:530)
	at org.ddahl.rscala.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply(ScalaServer.scala:530)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
	at scala.Console$.withErr(Console.scala:92)
	at org.ddahl.rscala.ScalaServer$$anonfun$run$1.apply$mcV$sp(ScalaServer.scala:529)
	at org.ddahl.rscala.ScalaServer$$anonfun$run$1.apply(ScalaServer.scala:529)
	at org.ddahl.rscala.ScalaServer$$anonfun$run$1.apply(ScalaServer.scala:529)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
	at scala.Console$.withOut(Console.scala:65)
	at org.ddahl.rscala.ScalaServer.run(ScalaServer.scala:528)
	at org.ddahl.rscala.Main$.delayedEndpoint$org$ddahl$rscala$Main$1(Main.scala:5)
	at org.ddahl.rscala.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:35)
	at scala.App$class.main(App.scala:76)
	at org.ddahl.rscala.Main$.main(Main.scala:3)
	at org.ddahl.rscala.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
java.lang.reflect.InvocationTargetException
java.lang.OutOfMemoryError: Java heap space
<simpleError in f(...): Invocation error.>
> close(s)
> cat("----\n")
----
> 
> heap.maximum <- "386M"
> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # ramah # TRUE # TRUE
> tryCatch(a <- s$".Array[Double]"$new(I(20000000L)),error=function(e) e)
> close(s)
> cat("----\n")
----
> 
> options(rscala.heap.maximum="64M")
> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # ramah # TRUE # TRUE
> tryCatch(a <- s$".Array[Double]"$new(I(20000000L)),error=function(e) e)
> close(s)
> cat("----\n")
----
> 
> options(rscala.heap.maximum="128M")
> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # ramah # TRUE # TRUE
> for ( i in 1:2000 ) {
+   a <- s$".Array[Double]"$new(I(100000L))  # No memory problems
+ }
> 
> tryCatch({
+ for ( i in 1:2000 ) {
+   s %~% "new Array[Double](100000)"           # Memory problems
+ }
+ },error=function(e) e)
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at scala.collection.immutable.List.$colon$colon(List.scala:112)
	at scala.collection.SeqLike$$anonfun$reverseMap$1.apply(SeqLike.scala:285)
	at scala.collection.SeqLike$$anonfun$reverseMap$1.apply(SeqLike.scala:284)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at scala.collection.SeqLike$class.reverseMap(SeqLike.scala:284)
	at scala.collection.AbstractSeq.reverseMap(Seq.scala:41)
	at scala.tools.nsc.interpreter.Imports$class.reqsToUse$1(Imports.scala:136)
	at scala.tools.nsc.interpreter.Imports$$anonfun$importsCode$1.apply$mcV$sp(Imports.scala:162)
	at scala.tools.nsc.interpreter.Imports$$anonfun$importsCode$1.apply(Imports.scala:159)
	at scala.tools.nsc.interpreter.Imports$$anonfun$importsCode$1.apply(Imports.scala:159)
	at scala.tools.nsc.interpreter.Imports$class.wrapBeforeAndAfter$1(Imports.scala:152)
	at scala.tools.nsc.interpreter.Imports$class.importsCode(Imports.scala:159)
	at scala.tools.nsc.interpreter.IMain.importsCode(IMain.scala:64)
	at scala.tools.nsc.interpreter.IMain$Request$$anonfun$16.apply(IMain.scala:896)
	at scala.tools.nsc.interpreter.IMain$Request$$anonfun$16.apply(IMain.scala:896)
	at scala.reflect.internal.SymbolTable.enteringPhase(SymbolTable.scala:235)
	at scala.reflect.internal.SymbolTable.exitingPhase(SymbolTable.scala:256)
	at scala.tools.nsc.interpreter.IMain$Request.x$20$lzycompute(IMain.scala:896)
	at scala.tools.nsc.interpreter.IMain$Request.x$20(IMain.scala:895)
	at scala.tools.nsc.interpreter.IMain$Request.headerPreamble$lzycompute(IMain.scala:895)
	at scala.tools.nsc.interpreter.IMain$Request.headerPreamble(IMain.scala:895)
	at scala.tools.nsc.interpreter.IMain$Request$Wrapper.preamble(IMain.scala:918)
	at scala.tools.nsc.interpreter.IMain$CodeAssembler$$anonfun$apply$23.apply(IMain.scala:1337)
	at scala.tools.nsc.interpreter.IMain$CodeAssembler$$anonfun$apply$23.apply(IMain.scala:1336)
	at scala.tools.nsc.util.package$.stringFromWriter(package.scala:64)
	at scala.tools.nsc.interpreter.IMain$CodeAssembler$class.apply(IMain.scala:1336)
	at scala.tools.nsc.interpreter.IMain$Request$Wrapper.apply(IMain.scala:908)
	at scala.tools.nsc.interpreter.IMain$Request.compile$lzycompute(IMain.scala:1002)
	at scala.tools.nsc.interpreter.IMain$Request.compile(IMain.scala:997)
	at scala.tools.nsc.interpreter.IMain.compile(IMain.scala:579)
	at scala.tools.nsc.interpreter.IMain.interpret(IMain.scala:567)
	at scala.tools.nsc.interpreter.IMain.interpretSynthetic(IMain.scala:566)
java.lang.OutOfMemoryError: GC overhead limit exceeded
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Exception thrown.>
> 
> 
> 
