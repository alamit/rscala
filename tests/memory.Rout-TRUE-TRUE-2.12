> heap.maximum <- "64M"
> source("common.R",print.eval=TRUE)
# R version 3.3.3 (2017-03-06) # ramah # TRUE # TRUE
> 
> tryCatch(a <- s$".Array[Double]"$new(I(20000000L)),error=function(e) e)
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.ScalaServer.doInvoke(ScalaServer.scala:126)
	at org.ddahl.rscala.ScalaServer.heart(ScalaServer.scala:510)
	at org.ddahl.rscala.ScalaServer.$anonfun$run$2(ScalaServer.scala:529)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
	at scala.Console$.withErr(Console.scala:192)
	at org.ddahl.rscala.ScalaServer.$anonfun$run$1(ScalaServer.scala:529)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
	at scala.Console$.withOut(Console.scala:163)
	at org.ddahl.rscala.ScalaServer.run(ScalaServer.scala:528)
	at org.ddahl.rscala.Main$.delayedEndpoint$org$ddahl$rscala$Main$1(Main.scala:5)
	at org.ddahl.rscala.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0.apply$mcV$sp(Function0.scala:34)
	at scala.Function0.apply$mcV$sp$(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App.$anonfun$main$1$adapted(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:389)
	at scala.App.main(App.scala:76)
	at scala.App.main$(App.scala:74)
	at org.ddahl.rscala.Main$.main(Main.scala:3)
	at org.ddahl.rscala.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader.$anonfun$run$2(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader.asContext(ScalaClassLoader.scala:32)
	at scala.reflect.internal.util.ScalaClassLoader.asContext$(ScalaClassLoader.scala:30)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:129)
	at scala.reflect.internal.util.ScalaClassLoader.run(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader.run$(ScalaClassLoader.scala:90)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:129)
	at scala.tools.nsc.CommonRunner.run(ObjectRunner.scala:22)
	at scala.tools.nsc.CommonRunner.run$(ObjectRunner.scala:21)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner.runAndCatch(ObjectRunner.scala:29)
	at scala.tools.nsc.CommonRunner.runAndCatch$(ObjectRunner.scala:28)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:61)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:88)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:99)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:104)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
Caused by: java.lang.OutOfMemoryError: Java heap space
	at $line5.$read$$iw$$iw$.$anonfun$res1$1(<console>:17)
	at $line5.$read$$iw$$iw$$$Lambda$993/1251788491.apply(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.ScalaServer.doInvoke(ScalaServer.scala:126)
	at org.ddahl.rscala.ScalaServer.heart(ScalaServer.scala:510)
	at org.ddahl.rscala.ScalaServer.$anonfun$run$2(ScalaServer.scala:529)
	at org.ddahl.rscala.ScalaServer$$Lambda$900/832292933.apply$mcV$sp(Unknown Source)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
	at scala.Console$.withErr(Console.scala:192)
	at org.ddahl.rscala.ScalaServer.$anonfun$run$1(ScalaServer.scala:529)
	at org.ddahl.rscala.ScalaServer$$Lambda$899/446445803.apply$mcV$sp(Unknown Source)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:58)
	at scala.Console$.withOut(Console.scala:163)
	at org.ddahl.rscala.ScalaServer.run(ScalaServer.scala:528)
	at org.ddahl.rscala.Main$.delayedEndpoint$org$ddahl$rscala$Main$1(Main.scala:5)
	at org.ddahl.rscala.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0.apply$mcV$sp(Function0.scala:34)
	at scala.Function0.apply$mcV$sp$(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App.$anonfun$main$1$adapted(App.scala:76)
	at scala.App$$Lambda$100/1651191114.apply(Unknown Source)
	at scala.collection.immutable.List.foreach(List.scala:389)
	at scala.App.main(App.scala:76)
	at scala.App.main$(App.scala:74)
	at org.ddahl.rscala.Main$.main(Main.scala:3)
	at org.ddahl.rscala.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
java.lang.reflect.InvocationTargetException
java.lang.OutOfMemoryError: Java heap space
<simpleError in f(...): Invocation error.>
> close(s)
> cat("----\n")
----
> 
> heap.maximum <- "386M"
> source("common.R",print.eval=TRUE)
# R version 3.3.3 (2017-03-06) # ramah # TRUE # TRUE
> tryCatch(a <- s$".Array[Double]"$new(I(20000000L)),error=function(e) e)
> close(s)
> cat("----\n")
----
> 
> options(rscala.heap.maximum="64M")
> source("common.R",print.eval=TRUE)
# R version 3.3.3 (2017-03-06) # ramah # TRUE # TRUE
> tryCatch(a <- s$".Array[Double]"$new(I(20000000L)),error=function(e) e)
> close(s)
> cat("----\n")
----
> 
> options(rscala.heap.maximum="128M")
> source("common.R",print.eval=TRUE)
# R version 3.3.3 (2017-03-06) # ramah # TRUE # TRUE
> for ( i in 1:2000 ) {
+   a <- s$".Array[Double]"$new(I(100000L))  # No memory problems
+ }
> 
> tryCatch({
+ for ( i in 1:2000 ) {
+   s %~% "new Array[Double](100000)"           # Memory problems
+ }
+ },error=function(e) e)
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at scala.reflect.internal.Scopes.scala$reflect$internal$Scopes$$newScopeEntry(Scopes.scala:37)
	at scala.reflect.internal.Scopes$Scope.enter(Scopes.scala:124)
	at scala.tools.nsc.transform.Flatten$$anon$1.$anonfun$apply$4(Flatten.scala:67)
	at scala.tools.nsc.transform.Flatten$$anon$1$$Lambda$515/1478150312.apply(Unknown Source)
	at scala.reflect.internal.Scopes$Scope.foreach(Scopes.scala:396)
	at scala.tools.nsc.transform.Flatten$$anon$1.$anonfun$apply$3(Flatten.scala:67)
	at scala.tools.nsc.transform.Flatten$$anon$1.$anonfun$apply$2(Flatten.scala:67)
	at scala.tools.nsc.transform.Flatten$$anon$1$$Lambda$514/850551034.apply(Unknown Source)
	at scala.reflect.internal.Scopes.scopeTransform(Scopes.scala:476)
	at scala.reflect.internal.Scopes.scopeTransform$(Scopes.scala:476)
	at scala.reflect.internal.SymbolTable.scopeTransform(SymbolTable.scala:16)
	at scala.tools.nsc.transform.Flatten$$anon$1.apply(Flatten.scala:64)
	at scala.tools.nsc.transform.Flatten.transformInfo(Flatten.scala:109)
	at scala.tools.nsc.transform.InfoTransform$Phase$$anon$1.transform(InfoTransform.scala:38)
	at scala.reflect.internal.Symbols$Symbol.rawInfo(Symbols.scala:1614)
	at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1531)
	at scala.reflect.internal.Importers$StandardImporter.recreateOrRelink$1(Importers.scala:167)
	at scala.reflect.internal.Importers$StandardImporter.importSymbol(Importers.scala:210)
	at scala.reflect.internal.Importers$StandardImporter.recreateOrRelink$1(Importers.scala:169)
	at scala.reflect.internal.Importers$StandardImporter.importSymbol(Importers.scala:210)
	at scala.reflect.internal.Importers$StandardImporter.recreateOrRelink$1(Importers.scala:166)
	at scala.reflect.internal.Importers$StandardImporter.importSymbol(Importers.scala:210)
	at scala.reflect.internal.Importers$StandardImporter.importSymbol(Importers.scala:29)
	at scala.tools.nsc.interpreter.IMain.importFromRu(IMain.scala:1024)
	at scala.tools.nsc.interpreter.IMain.$anonfun$getModuleIfDefined$1(IMain.scala:172)
	at scala.tools.nsc.interpreter.IMain.getModuleIfDefined(IMain.scala:165)
	at scala.tools.nsc.interpreter.IMain.readRootPath(IMain.scala:297)
	at scala.tools.nsc.interpreter.IMain$ReadEvalPrint.resolvePathToSymbol(IMain.scala:766)
	at scala.tools.nsc.interpreter.IMain$Request.resultSymbol$lzycompute(IMain.scala:969)
	at scala.tools.nsc.interpreter.IMain$Request.resultSymbol(IMain.scala:969)
	at scala.tools.nsc.interpreter.IMain$Request.$anonfun$typeMap$1(IMain.scala:977)
	at scala.tools.nsc.interpreter.IMain$Request$$Lambda$714/105579928.apply(Unknown Source)
java.lang.OutOfMemoryError: GC overhead limit exceeded
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Exception thrown.>
> 
> 
> 
