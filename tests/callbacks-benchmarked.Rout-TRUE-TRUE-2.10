
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("common.R",print.eval=TRUE)
TRUE TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- s$def(x=numeric()) %~% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] -0.5309233  1.9064429
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     42.689     98.630     96.1496    102.398    107.521
 doit1(rnorm(10)) 347318.544 490609.215 591785.5193 521525.166 755663.842
 doit2(rnorm(10)) 262941.045 295684.456 349014.1584 317762.105 415666.854
 doit3(rnorm(10))   2595.020   3476.841   9062.9600   5265.016   7011.127
       max neval
    118.02    10
 958257.65    10
 461202.06    10
  39054.28    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr     min     lq       mean   median       uq       max neval
 doit0(rnorm(10))  16.909  21.42   34.80249   31.844   38.030   201.166  1000
 doit3(rnorm(10)) 768.233 977.99 1517.76695 1027.031 1468.281 47918.447  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3576 200.3666 200.4296 200.4384 200.4749 200.5108     5
 doit1(rnorm(10)) 346.9079 368.0667 465.9548 451.9069 497.9027 664.9897     5
 doit2(rnorm(10)) 271.1492 276.6789 281.6500 282.3424 286.3393 291.7399     5
 doit3(rnorm(10)) 202.6443 202.6949 202.7904 202.7325 202.7834 203.0969     5
> 
> 
