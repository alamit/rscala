> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     48.641     70.839    406.5822    107.144    115.429
 doit1(rnorm(10)) 397342.028 507654.491 605443.6098 599622.083 715697.899
 doit2(rnorm(10)) 224028.017 267598.275 368218.8383 396127.243 441662.428
 doit3(rnorm(10))   3688.187   3922.568   5071.3869   4239.253   5725.453
 doit4(rnorm(10))   2222.449   2475.954   4592.0479   2820.974   3203.881
        max neval
   3226.685    10
 851292.241    10
 469150.360    10
   9641.752    10
  20587.795    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq       max
 doit0(rnorm(10))   17.344   32.6160   45.27912   39.051   54.3685   142.725
 doit3(rnorm(10)) 1454.801 1606.1685 2550.07241 1768.652 2673.5990 47492.759
 doit4(rnorm(10))  757.397  911.1345 1611.64911 1005.516 1587.9350 63017.508
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3802 200.3943 200.4398 200.3972 200.4491 200.5783     5
 doit1(rnorm(10)) 331.4315 333.3557 378.4581 349.1031 392.1796 486.2206     5
 doit2(rnorm(10)) 294.4647 313.2188 365.3884 332.4155 345.5736 541.2696     5
 doit3(rnorm(10)) 202.9482 204.6604 206.6572 204.8315 204.8559 215.9897     5
 doit4(rnorm(10)) 202.3076 202.3939 202.9774 202.8114 203.4584 203.9155     5
> 
> 
