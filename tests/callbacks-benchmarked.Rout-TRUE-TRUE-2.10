> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-04-25 r72623) # ramah # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     38.333     73.603    363.7461    101.1465    117.098
 doit1(rnorm(10)) 408642.061 539429.972 622420.8714 642545.1335 707007.065
 doit2(rnorm(10)) 297245.817 331435.610 388114.4603 371884.3270 396044.036
 doit3(rnorm(10))   3542.571   4052.375   7992.2799   5099.6935   7207.145
 doit4(rnorm(10))   2115.160   2697.295   6420.4939   3390.2535  11732.673
        max neval
   2797.168    10
 744777.599    10
 537797.488    10
  19625.408    10
  18409.042    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq      mean   median        uq       max
 doit0(rnorm(10))   17.911   33.057   51.2542   39.877   52.7795  1966.588
 doit3(rnorm(10)) 1425.585 1657.133 2704.1759 1777.030 2544.5885 63974.217
 doit4(rnorm(10))  757.400  944.122 1732.1374 1027.222 1582.0935 59028.663
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3551 200.3762 200.4203 200.3965 200.4865 200.4872     5
 doit1(rnorm(10)) 333.8447 353.6513 361.0171 361.6046 375.1445 380.8403     5
 doit2(rnorm(10)) 294.0740 325.0621 353.8943 348.0707 350.2376 452.0270     5
 doit3(rnorm(10)) 203.8602 205.1772 208.4896 208.9876 209.2119 215.2110     5
 doit4(rnorm(10)) 202.0308 202.2793 203.0112 203.0073 203.5944 204.1444     5
> 
> 
