> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     41.821     94.280    523.4658    132.6695    152.156
 doit1(rnorm(10)) 319903.475 435966.528 636119.1438 641994.1010 811576.403
 doit2(rnorm(10)) 179525.657 216949.510 376213.1815 343157.9905 480822.999
 doit3(rnorm(10))   3798.510   4712.520  12541.1806   5963.1900   7726.229
 doit4(rnorm(10))   1934.319   2256.852   3779.0747   3090.5465   4536.124
         max neval
    4185.319    10
 1049850.578    10
  685397.345    10
   60407.938    10
    8192.300    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median       uq        max
 doit0(rnorm(10))   30.847   65.0425   89.48166   83.7675  109.631   2448.331
 doit3(rnorm(10)) 2418.323 3869.3290 5933.24674 4544.2045 5024.172  81207.957
 doit4(rnorm(10)) 1395.144 2230.1635 4234.46725 2763.7625 3133.599 231577.621
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4476 200.4694 201.9508 202.4968 202.5334  203.8067     5
 doit1(rnorm(10)) 578.1386 620.0001 665.5920 658.2569 687.0166  784.5477     5
 doit2(rnorm(10)) 430.6302 486.6833 624.9095 583.3486 606.7114 1017.1739     5
 doit3(rnorm(10)) 205.0020 205.3125 208.9801 205.3969 208.9076  220.2812     5
 doit4(rnorm(10)) 203.3878 203.4865 206.0227 203.6091 204.3630  215.2669     5
> 
> 
