> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq       mean     median         uq
 doit0(rnorm(10))     76.406    135.179    687.175    161.043    192.486
 doit1(rnorm(10)) 369050.480 492480.138 711323.661 788246.431 852297.002
 doit2(rnorm(10)) 203953.932 267636.372 369096.071 320534.831 474200.461
 doit3(rnorm(10))   4404.306   4780.630   7892.246   5498.500   6681.776
 doit4(rnorm(10))   2328.147   2596.718   8391.703   2871.559   9974.850
        max neval
   5546.602    10
 943074.101    10
 691491.895    10
  25857.447    10
  36099.312    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq      mean    median       uq      max neval
 doit0(rnorm(10))   33.941   70.813  113.5672   89.7925  111.749 20027.83  1000
 doit3(rnorm(10)) 2196.422 3630.988 5627.9117 4154.8140 4598.399 80183.75  1000
 doit4(rnorm(10)) 1132.939 1908.158 3338.3246 2277.6955 2577.431 76414.33  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4759 200.4838 200.4923 200.4969 200.4999  200.5048     5
 doit1(rnorm(10)) 639.0105 663.5501 772.0501 764.9022 882.6653  910.1224     5
 doit2(rnorm(10)) 421.5800 432.5138 594.9494 499.8657 560.1471 1060.6406     5
 doit3(rnorm(10)) 204.7365 205.0039 215.4953 206.5919 211.2038  249.9404     5
 doit4(rnorm(10)) 203.0752 203.1078 203.2652 203.2845 203.3325  203.5260     5
> 
> 
