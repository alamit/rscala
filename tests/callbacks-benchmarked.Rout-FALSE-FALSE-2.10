> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     47.920     88.345    388.2225    100.9705    117.697
 doit1(rnorm(10)) 383982.739 530174.581 589144.8989 601827.0250 653296.430
 doit2(rnorm(10)) 261156.439 320293.264 401294.8899 379460.4710 411606.514
 doit3(rnorm(10))   2896.459   3633.954  10575.3367   8879.0600  17921.558
 doit4(rnorm(10))   1628.046   1879.872   3341.8895   2145.7640   2945.979
        max neval
   3040.853    10
 752059.711    10
 667722.291    10
  20556.816    10
   8748.439    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean   median        uq       max
 doit0(rnorm(10))   17.690   26.143   38.70692   35.674   41.5725  1393.294
 doit3(rnorm(10)) 1213.256 1383.034 1765.50918 1436.969 1683.7075 37631.013
 doit4(rnorm(10))  580.696  712.685  951.89093  745.852  923.7210 19430.460
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3253 200.4003 200.4384 200.4031 200.5243 200.5391     5
 doit1(rnorm(10)) 340.4414 358.1496 374.3508 385.0989 392.1839 395.8801     5
 doit2(rnorm(10)) 276.1157 283.9480 354.6419 296.3920 303.6122 613.1415     5
 doit3(rnorm(10)) 202.4546 203.9924 205.3624 205.5999 206.5433 208.2217     5
 doit4(rnorm(10)) 201.7660 201.7741 202.0014 202.0219 202.0675 202.3778     5
> 
> 
