
R Under development (unstable) (2016-07-05 r70861) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> 
> serialize <- as.logical(Sys.getenv("RSCALA_SERIALIZE"))
> output <- as.logical(Sys.getenv("RSCALA_OUTPUT"))
> cat(serialize,"\n")
TRUE 
> cat(output,"\n")
FALSE 
> s <- scala(serialize=serialize,stdout=output,stderr=output)
> 
> 
> s %~% "scala.util.Properties.versionNumberString"
[1] "2.11.8"
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   c(f(x),g(x))
+ }
> 
> doit0(rnorm(10))
[1] 0.05039833 1.42628354
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.003361504 1.775208366
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.894893  1.253133
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- s$def('x: Array[Double]','
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ ')
> 
> doit3(rnorm(10))
[1] 0.9674907 2.0647755
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     36.864     40.725     79.8917     93.2545    110.105
 doit1(rnorm(10)) 306356.548 309837.400 360256.8650 333240.2685 369213.869
 doit2(rnorm(10)) 210787.755 215910.604 305758.8179 223245.2285 454180.230
 doit3(rnorm(10))   2088.840   2153.970   2427.7865   2354.1060   2725.080
        max neval
    120.676    10
 532715.179    10
 609128.159    10
   2984.173    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq      mean    median       uq      max
 doit0(rnorm(10))   28.053   33.1065   38.6483   38.4645   41.130  938.940
 doit3(rnorm(10)) 1274.178 1337.3645 1452.2257 1369.8690 1421.435 7296.314
 neval
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4585 200.4801 200.4986 200.4807 200.5319 200.5420     5
 doit1(rnorm(10)) 520.9921 561.7315 562.2620 570.1029 570.2637 588.2200     5
 doit2(rnorm(10)) 401.4860 401.8107 426.6143 408.3600 450.4827 470.9320     5
 doit3(rnorm(10)) 203.4376 204.6768 204.8204 205.2124 205.2770 205.4985     5
> 
> 
> proc.time()
   user  system elapsed 
  1.828   0.288  20.248 
