> jars <- c("commons-math3-3.2.jar","shallot.jar")
> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # FALSE # FALSE
> 
> tryCatch(s %~% 'new org.apache.commons.math3.random.EmpiricalDistribution()',error=function(e) e)   # Scala 2.11.x class loader is weird.  This line avoid subsequent problems.
ScalaInterpreterReference... res1: org.apache.commons.math3.random.EmpiricalDistribution
> 
> 
> scalap(s,"org.apache.commons.math3.random.RandomDataGenerator")
> s$.org.apache.commons.math3.random.RandomDataGenerator
ScalaInterpreterItem of type org.apache.commons.math3.random.RandomDataGenerator
> rdg <- s$.org.apache.commons.math3.random.RandomDataGenerator$new()
> 
> rdg$reSeed(39234L)
> rexp <- rdg$nextExponential(2,.EVALUATE=FALSE)
> 
> library(microbenchmark)
> options(width=120)
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr      min        lq      mean    median        uq      max neval
 rdg$nextExponential(4) 1515.775 1747.3160 2470.0162 2021.9815 2828.3395 65824.57  1000
                rexp(4)  324.796  405.5455  621.6493  463.5435  657.7985 16993.30  1000
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr      min        lq      mean   median       uq      max neval
 rdg$nextExponential(4) 1534.789 1742.1010 2717.9051 2583.432 2969.958 85311.32  1000
                rexp(4)  302.688  384.9815  620.9387  580.983  714.490 13912.98  1000
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr      min       lq      mean   median       uq      max neval
 rdg$nextExponential(4) 1600.627 2366.903 3035.4192 2918.913 3085.299 71519.08  1000
                rexp(4)  357.301  443.355  718.1616  676.755  748.851 18558.93  1000
> 
> s$.org.ddahl.shallot.parameter.Mass
ScalaInterpreterItem of type org.ddahl.shallot.parameter.Mass
> massFactory3 <- s$.org.ddahl.shallot.parameter.Mass$factory(1.0,3.0,rdg)
> s %~% "3+4"
[1] 7
> 
> mass <- s$.org.ddahl.shallot.parameter.Mass$apply(3.4)
> massFactory1 <- s$.org.ddahl.shallot.parameter.Mass$factory(mass)
> massFactory2 <- s$.org.ddahl.shallot.parameter.Mass$factory(3.0)
> massFactory3 <- s$.org.ddahl.shallot.parameter.Mass$factory(1.0,3.0,rdg)
> massFactory3$apply()$logValue()
[1] -2.27295
> massFactory3$apply()$logValue()
[1] -3.893189
> massFactory3$apply()$logValue()
[1] -2.183371
> 
> 
> 
> s %@% '
+ class Bob {
+ 
+   val a = 3.0
+   var b = 4.0
+ 
+   def sum(c: Int) = { a + b + c }
+ 
+ }
+ '
> 
> d <- s$.Bob$new()
> d[['type']]                           # Note the weird 'iw$' prepended to 'Bob'
[1] "iw$Bob"
> tryCatch(d$b(),error=function(e) e)   # Doesn't work
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> 
> d[['type']] <- "Bob"     # Cast it to be 'Bob'
> d$b()                    # Now it does
[1] 4
> 
> d$sum(4L)
[1] 11
> m <- d$sum(5L,.EVALUATE=FALSE)
> 
> m(3)                                                   # Casting is not necessary here
[1] 10
> d$sum(as.integer(3))                                   # But it is here
[1] 10
> 
> 
