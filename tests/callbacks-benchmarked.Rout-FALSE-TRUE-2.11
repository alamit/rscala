> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     26.360     49.676    324.5075    102.013    114.734
 doit1(rnorm(10)) 521379.588 702908.190 838183.1044 895573.029 948002.157
 doit2(rnorm(10)) 300364.223 359822.450 531894.0582 393317.185 528455.014
 doit3(rnorm(10))   2031.957   3504.087   7382.0156   3804.045   6582.194
 doit4(rnorm(10))   1026.716   1747.456   3066.9295   1927.185   3278.487
         max neval
    2484.429    10
 1237888.800    10
 1387492.569    10
   23010.348    10
   10096.017    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median       uq       max
 doit0(rnorm(10))   17.768   27.8110   39.72589   36.5000   47.116   190.891
 doit3(rnorm(10)) 1137.452 1356.4300 1798.79992 1579.9515 1993.912 31920.387
 doit4(rnorm(10))  559.295  717.0335  951.59351  815.2725  979.328  9808.128
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3532 200.4429 200.4870 200.5138 200.5388 200.5861     5
 doit1(rnorm(10)) 458.3787 502.5636 517.8181 525.8428 550.6511 551.6545     5
 doit2(rnorm(10)) 348.6503 391.9323 413.0704 397.4147 449.6726 477.6823     5
 doit3(rnorm(10)) 202.9995 203.3951 204.9145 204.1413 204.7336 209.3028     5
 doit4(rnorm(10)) 202.2761 202.3590 202.6109 202.3862 202.7550 203.2781     5
> 
> 
