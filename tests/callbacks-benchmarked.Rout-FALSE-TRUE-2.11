> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median          uq
 doit0(rnorm(10))     43.057     91.707    570.4593    157.989     202.666
 doit1(rnorm(10)) 477888.351 590761.330 927901.8092 826997.056 1000689.851
 doit2(rnorm(10)) 288819.176 361686.961 539078.4020 463231.919  761784.543
 doit3(rnorm(10))   2709.656   4382.701   8450.2354   6296.591    9581.988
 doit4(rnorm(10))   1322.937   1662.611   2191.7380   2065.677    2360.298
         max neval
    4449.951    10
 2030607.772    10
  942290.509    10
   26835.831    10
    4264.630    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq      mean    median        uq        max
 doit0(rnorm(10))   30.291   57.8005   76.7381   72.0735   94.8945    251.708
 doit3(rnorm(10)) 2031.422 2479.9460 4092.4496 3619.7885 4106.6590 108753.953
 doit4(rnorm(10)) 1001.830 1258.3940 2157.3224 1912.9940 2247.8620  27967.590
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.5140 200.5464 200.6994 200.5633 200.5732 201.3003     5
 doit1(rnorm(10)) 862.3553 876.7468 896.6182 878.0484 891.0926 974.8478     5
 doit2(rnorm(10)) 581.4709 586.1832 667.4512 606.9660 676.1831 886.4531     5
 doit3(rnorm(10)) 204.4328 204.8966 208.5301 206.6467 209.5823 217.0920     5
 doit4(rnorm(10)) 202.9070 203.4476 203.5696 203.4929 203.5137 204.4866     5
> 
> 
