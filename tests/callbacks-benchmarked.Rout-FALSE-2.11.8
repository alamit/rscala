
R Under development (unstable) (2016-07-05 r70861) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> 
> serialize <- as.logical(Sys.getenv("RSCALA_SERIALIZE"))
> cat(serialize,"\n")
FALSE 
> s <- scalaInterpreter(serialize=serialize)
Loading /tmp/RtmpBeUxKu/rscala-7de7905dba7...
> 
> cat(s %~% "util.Properties.versionNumberString","\n")
2.11.8 
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   c(f(x),g(x))
+ }
> 
> doit0(rnorm(10))
[1] -0.2851701  1.1159135
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.5102952 2.2835820
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.9900175  1.4545325
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- s$def('x: Array[Double]','
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ ')
> 
> doit3(rnorm(10))
[1] -0.2611347  2.0764358
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     36.072     47.257     69.6212     52.2395    103.971
 doit1(rnorm(10)) 295263.139 328880.261 366375.0914 363745.9570 385191.779
 doit2(rnorm(10)) 183231.942 203003.712 226298.7028 218494.1935 234904.804
 doit3(rnorm(10))   1465.068   1608.838   1974.9988   1985.9690   2121.163
        max neval
    111.958    10
 497747.200    10
 304109.313    10
   2711.032    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median       uq      max
 doit0(rnorm(10))   28.627   34.1855   42.91248   40.2425   44.104  778.512
 doit3(rnorm(10)) 1046.013 1135.3945 1299.37950 1209.4010 1328.628 2982.790
 neval
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4208 200.4755 200.5096 200.4756 200.5524 200.6237     5
 doit1(rnorm(10)) 507.2866 543.9195 555.5381 556.5692 569.2465 600.6686     5
 doit2(rnorm(10)) 398.0834 405.9407 415.7346 411.2758 429.2511 434.1219     5
 doit3(rnorm(10)) 202.9992 204.2207 204.1043 204.2964 204.4787 204.5265     5
> 
> 
> proc.time()
   user  system elapsed 
  1.656   0.336  20.548 
