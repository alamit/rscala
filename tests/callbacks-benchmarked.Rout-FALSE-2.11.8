
R Under development (unstable) (2016-07-05 r70861) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> 
> serialize <- as.logical(Sys.getenv("RSCALA_SERIALIZE"))
> cat(serialize,"\n")
FALSE 
> s <- scalaInterpreter(serialize=serialize)
Loading /tmp/Rtmpl4xvoL/rscala-73bd80b4262...
> 
> cat(s %~% "util.Properties.versionNumberString","\n")
2.11.8 
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   c(f(x),g(x))
+ }
> 
> doit0(rnorm(10))
[1] -0.1699395  0.7097931
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.556558 1.714795
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] 0.6020743 1.9563470
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- s$def('x: Array[Double]','
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ ')
> 
> doit3(rnorm(10))
[1] 0.4636389 1.5467599
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     35.386     53.828     80.7206     81.890    102.552
 doit1(rnorm(10)) 301869.378 357589.595 387870.0796 375879.946 414862.373
 doit2(rnorm(10)) 204736.486 221972.534 296866.5625 255372.291 366585.384
 doit3(rnorm(10))   1652.137   1682.101   1861.1437   1881.734   1990.522
        max neval
    133.267    10
 500126.678    10
 555840.066    10
   2154.534    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean    median       uq      max
 doit0(rnorm(10))   27.667   33.271   39.13736   38.7695   41.512  168.120
 doit3(rnorm(10)) 1028.438 1091.257 1167.94875 1133.4905 1191.569 2297.086
 neval
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4423 200.4637 200.5206 200.5306 200.5748 200.5916     5
 doit1(rnorm(10)) 520.3093 548.4332 557.2992 564.6785 565.0281 588.0469     5
 doit2(rnorm(10)) 414.6012 424.8265 440.9078 436.9219 450.3426 477.8469     5
 doit3(rnorm(10)) 202.5808 203.2388 203.6882 203.5037 204.5464 204.5711     5
> 
> 
> proc.time()
   user  system elapsed 
  1.532   0.260  21.635 
