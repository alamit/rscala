> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     39.823     80.152    563.2342    137.8165    161.963
 doit1(rnorm(10)) 335476.198 411935.032 660154.2926 696772.3500 874911.166
 doit2(rnorm(10)) 207982.904 241711.350 391364.5717 311821.4260 482272.305
 doit3(rnorm(10))   3054.048   4923.010   5221.0902   5452.0525   5820.345
 doit4(rnorm(10))   1819.977   2124.727   3174.3976   2886.6380   3078.513
         max neval
    4558.394    10
 1066686.846    10
  731655.433    10
    6820.733    10
    7114.428    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean   median        uq        max
 doit0(rnorm(10))   31.073   65.831   92.48569   90.450  109.7455   2217.653
 doit3(rnorm(10)) 2293.748 4054.936 6256.07317 4536.204 4881.8145 205768.958
 doit4(rnorm(10)) 1300.239 2339.838 3800.99833 2741.507 2993.6740 123875.086
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4310 200.4459 201.7911 200.4494 200.4693  207.1599     5
 doit1(rnorm(10)) 571.3699 669.3131 712.1160 751.9191 776.8513  791.1269     5
 doit2(rnorm(10)) 404.4240 444.1650 614.1574 529.9313 531.8632 1160.4037     5
 doit3(rnorm(10)) 205.0564 205.1186 207.5304 205.4394 205.6620  216.3755     5
 doit4(rnorm(10)) 203.4448 203.4763 206.0735 206.3802 206.6768  210.3895     5
> 
> 
