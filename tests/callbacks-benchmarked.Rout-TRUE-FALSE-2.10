> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-04-25 r72623) # ramah # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     43.577     74.398    386.7978    114.443    124.416
 doit1(rnorm(10)) 485631.906 577004.716 656360.6928 628687.630 758523.801
 doit2(rnorm(10)) 223480.364 322705.941 414416.9188 367765.312 503611.517
 doit3(rnorm(10))   3543.165   3796.377   5042.2435   5407.883   5957.546
 doit4(rnorm(10))   2163.201   2476.813   7708.3989   2984.994   3327.838
        max neval
   2976.097    10
 863430.964    10
 784328.612    10
   6520.854    10
  37009.365    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq       max
 doit0(rnorm(10))   17.628   30.5900   46.00089   38.637   47.4815  1932.004
 doit3(rnorm(10)) 1313.864 1641.8555 2297.57660 1776.543 2457.1925 38582.608
 doit4(rnorm(10))  718.475  942.4965 1408.72201 1017.090 1414.3460 36072.942
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3560 200.4108 200.4197 200.4232 200.4493 200.4592     5
 doit1(rnorm(10)) 347.2937 359.4715 389.4980 373.4361 411.3932 455.8955     5
 doit2(rnorm(10)) 301.7450 302.0375 369.4486 339.2422 344.1852 560.0331     5
 doit3(rnorm(10)) 203.0603 203.7644 205.8798 205.1225 206.1444 211.3076     5
 doit4(rnorm(10)) 202.1701 202.3735 202.5809 202.5346 202.6143 203.2118     5
> 
> 
