> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     41.560     84.698    398.6744    109.836    123.551
 doit1(rnorm(10)) 414298.508 597281.660 638807.0310 632934.580 738270.422
 doit2(rnorm(10)) 171836.288 268886.889 381018.5680 390951.823 500858.580
 doit3(rnorm(10))   3755.451   4317.547  10620.0781   6484.466  10829.377
 doit4(rnorm(10))   2184.190   2356.491   7460.6364   3487.313   9030.718
        max neval
   3111.351    10
 773672.783    10
 613260.348    10
  29315.108    10
  31457.922    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median       uq       max
 doit0(rnorm(10))   17.826   30.6055   40.75826   37.964   49.078   127.239
 doit3(rnorm(10)) 1322.924 1610.0005 2202.25777 1739.064 2412.184 39223.671
 doit4(rnorm(10))  721.791  919.1755 1397.57413  997.478 1333.926 43549.272
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3599 200.4041 200.4509 200.4182 200.4347 200.6375     5
 doit1(rnorm(10)) 344.2280 365.3997 374.1050 372.1482 381.7325 407.0167     5
 doit2(rnorm(10)) 262.8445 279.5837 343.1778 329.1802 379.1256 465.1551     5
 doit3(rnorm(10)) 203.6350 203.9569 205.7160 204.5317 204.8146 211.6417     5
 doit4(rnorm(10)) 202.3656 202.5195 202.8464 202.8173 203.0223 203.5072     5
> 
> 
