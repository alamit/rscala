
R Under development (unstable) (2016-07-05 r70861) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> 
> serialize <- as.logical(Sys.getenv("RSCALA_SERIALIZE"))
> output <- as.logical(Sys.getenv("RSCALA_OUTPUT"))
> cat(serialize,"\n")
FALSE 
> cat(output,"\n")
TRUE 
> s <- scala(c("commons-math3-3.2.jar","shallot.jar"),serialize=serialize,stdout=output,stderr=output)
Switched off result printing.
> s %~% "scala.util.Properties.versionNumberString"
[1] "2.10.6"
> 
> 
> scalap(s,"org.apache.commons.math3.random.RandomDataGenerator")
class/object org.apache.commons.math3.random.RandomDataGenerator not found.
> rdg <- tryCatch(s$do("org.apache.commons.math3.random.RandomDataGenerator")$new(),error=function(e) e)  # There is some incompatability between Scala REPL classloader and the Apache Commons Math jar.
> rdg <- s$do("org.apache.commons.math3.random.RandomDataGenerator")$new()                                # Rerun and it works fine.
> rexp <- rdg$nextExponential(2,evaluate=FALSE)
> 
> library(microbenchmark)
> options(width=120)
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr     min       lq     mean   median      uq       max neval
 rdg$nextExponential(4) 556.815 576.3690 649.1581 589.5525 610.212 24137.521  1000
                rexp(4) 488.836 505.8635 547.2374 517.2875 533.781  2628.251  1000
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr     min       lq     mean   median       uq      max neval
 rdg$nextExponential(4) 553.827 576.0275 634.4359 584.4985 592.1045 2134.754  1000
                rexp(4) 490.234 505.7190 554.3584 513.1405 519.1760 2898.255  1000
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr     min       lq     mean   median       uq      max neval
 rdg$nextExponential(4) 534.094 561.0205 579.7961 564.7665 575.3425 3532.380  1000
                rexp(4) 465.087 492.3650 512.0502 495.9380 505.3480 1235.648  1000
> 
> massFactory3 <- s$do("org.ddahl.shallot.parameter.Mass")$factory(1.0,3.0,s$do("org.apache.commons.math3.random.RandomDataGenerator")$new())
> s %~% "3+4"
[1] 7
> 
> scalap(s,"org.ddahl.shallot.parameter.Mass")
class/object org.ddahl.shallot.parameter.Mass not found.
> mass <- s$do("org.ddahl.shallot.parameter.Mass")$apply(3.4)
> massFactory1 <- s$do("org.ddahl.shallot.parameter.Mass")$factory(mass)
> massFactory2 <- s$do("org.ddahl.shallot.parameter.Mass")$factory(3.0)
> massFactory3 <- s$do("org.ddahl.shallot.parameter.Mass")$factory(1.0,3.0,rdg)
> massFactory3$apply()$logValue()
[1] -1.151721
> massFactory3$apply()$logValue()
[1] -0.9137687
> massFactory3$apply()$logValue()
[1] -1.073414
> 
> 
> 
> s %~% '
+ class Bob {
+ 
+   val a = 3.0
+   var b = 4.0
+ 
+   def sum(c: Int) = { a + b + c }
+ 
+ }
+ '
ScalaInterpreterReference... res9: org.ddahl.shallot.parameter.Mass => Double
> 
> d <- s$do("Bob")$new()
> d[['type']]                           # Note the weird 'iw$' prepended to 'Bob'
[1] "iw$Bob"
> tryCatch(d$b(),error=function(e) e)   # Doesn't work
<console>:8: error: not found: type iw$Bob
              (rscalaReference: iw$Bob) => { rscalaReference.b }
                                ^
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Evaluation error.>
> 
> d[['type']] <- "Bob"     # Cast it to be 'Bob'
> d$b()                    # Now it does
[1] 4
> 
> d$sum(as.integer(4))
[1] 11
> m <- d$sum(as.integer(5),evaluate=FALSE)
> 
> m(3)                                    # Casting is not necessary here
[1] 10
> d$sum(as.integer(3))                    # But it is here
[1] 10
> tryCatch(d$sum(3),error=function(e) e)  # and here
java.lang.RuntimeException: Parse error in 'def'.
	at org.ddahl.rscala.ScalaServer.doDef(ScalaServer.scala:153)
	at org.ddahl.rscala.ScalaServer.org$ddahl$rscala$ScalaServer$$heart(ScalaServer.scala:563)
	at org.ddahl.rscala.ScalaServer.run(ScalaServer.scala:591)
	at org.ddahl.rscala.Main$delayedInit$body.apply(Main.scala:5)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:40)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:71)
	at scala.App$$anonfun$main$1.apply(App.scala:71)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:32)
	at scala.App$class.main(App.scala:71)
	at org.ddahl.rscala.Main$.main(Main.scala:3)
	at org.ddahl.rscala.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.tools.nsc.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:71)
	at scala.tools.nsc.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:139)
	at scala.tools.nsc.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:71)
	at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:139)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:28)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:45)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:35)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:45)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:74)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:96)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:105)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
java.lang.RuntimeException: Parse error in 'def'.
<console>:9: error: type mismatch;
 found   : Double
 required: Int
              (rscalaReference: Bob,x1: Double) => { rscalaReference.sum(x1) }
                                                                         ^
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Evaluation error.>
> 
> 
> proc.time()
   user  system elapsed 
  3.100   0.868   7.564 
