
R Under development (unstable) (2016-07-05 r70861) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> 
> serialize <- as.logical(Sys.getenv("RSCALA_SERIALIZE"))
> output <- as.logical(Sys.getenv("RSCALA_OUTPUT"))
> version <- Sys.getenv("RSCALA_SCALA_VERSION")
> s <- scala(serialize=serialize,stdout=output,stderr=output)
> if ( version != s %~% "scala.util.Properties.versionNumberString" ) stop("Version mismatch.")
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   c(f(x),g(x))
+ }
> 
> doit0(rnorm(10))
[1] 0.05067312 0.74823148
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- s$def('x: Array[Double]','
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ ')
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     29.487     49.341     75.5898     75.344    101.649
 doit1(rnorm(10)) 301397.579 320487.339 377746.4455 345035.182 381846.730
 doit2(rnorm(10)) 180168.765 204017.218 235929.1166 222605.162 249302.064
 doit3(rnorm(10))   1190.501   1462.832   1594.6459   1508.986   1717.937
        max neval
    137.060    10
 671049.447    10
 372620.533    10
   2079.782    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr     min       lq      mean  median      uq      max neval
 doit0(rnorm(10))  27.724  31.4595  34.98105  35.211  37.823   81.238  1000
 doit3(rnorm(10)) 929.575 957.9535 993.69665 968.207 994.541 1798.001  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4502 200.4795 200.5219 200.5391 200.5661 200.5743     5
 doit1(rnorm(10)) 505.2951 521.1615 545.5776 535.4228 565.6354 600.3732     5
 doit2(rnorm(10)) 402.7927 412.6946 439.2337 424.4299 474.7671 481.4841     5
 doit3(rnorm(10)) 201.5455 203.8431 203.4894 203.9810 204.0149 204.0623     5
> 
> 
> proc.time()
   user  system elapsed 
  1.400   0.256  19.101 
