> source("common.R",print.eval=TRUE)
# R version 3.3.3 (2017-03-06) # ramah # FALSE # TRUE
> 
> 
> ####
> 
> 
> rng1 <- s %.~% "new scala.util.Random"
> rng1$nextDouble()
[1] 0.3556339
> 
> s$r1 <- rng1
> rng2 <- s$r1
> rng2$nextDouble()
[1] 0.4079083
> 
> rng3 <- s$.scala.util.Random$new()
> rng3$nextDouble()
[1] 0.4839249
> 
> s$r3 <- rng3
> rng4 <- s$r3
> rng4$nextDouble()
[1] 0.4792593
> 
> 
> ####
> 
> 
> see <- "David"
> mkFunc1 <- function() {
+   see <- "B."
+   x <- "Milly"
+   print(environment())
+   r <- s$def(I("Mack"),I("Bob")) %~% '
+     x1+" "+x2+" "+R.getS0("see")
+   '
+   r
+ }
> y1 <- mkFunc1()
<environment: 0x1dfd668>
> identical(y1("Lisa","Dahl"),"Lisa Dahl B.")
[1] TRUE
> 
> 
> mkFunc2 <- function() {
+   see <- "MMMM."
+   x <- "Milly"
+   r <- s$def(x=I("Mack"),y=I("Bob")) %.~% '
+       x+" "+y+" "+R.getS0("see")
+   '
+   r
+ }
> y2 <- mkFunc2()
> identical(y2("Lisa","Dahl")$toString(),"Lisa Dahl MMMM.")
[1] TRUE
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 232036 12.4     460000 24.6   350000 18.7
Vcells 334668  2.6     786432  6.0   786371  6.0
> 
> 
> 
> func1 <- function() {
+   see <- "Knudsen"
+   y1("Lisa","Dahl")
+ }
> identical(func1(),"Lisa Dahl B.")
[1] TRUE
> 
> 
> ####
> 
> 
> # Realistic timing
> system.time(e <- s$def(x=I(0),y=I(4L),name=I("dog")) %~% '
+   name + " " + ( x + y )
+ ')
   user  system elapsed 
  0.004   0.000   0.374 
> 
> # Taking advantage of caching
> system.time(f <- s$def(x=I(0),y=I(4L),name=I("dog")) %~% '
+   name + " " + ( x + y )
+ ')
   user  system elapsed 
  0.000   0.000   0.002 
> 
> ####
> 
> nextDouble <- s$def(rng=s$null("scala.util.Random")) %~% "rng.nextDouble()"
> 
> mkRNG1 <- s$def() %.~% 'new scala.util.Random()'
> mkRNG2 <- function() s %.~% 'new scala.util.Random()'
> 
> rng1 <- mkRNG1()
> rng2 <- mkRNG2()
> 
> rng1$nextInt(I(10L))
[1] 8
> rng2$nextInt(I(10L))
[1] 4
> 
> str <- rng1$toString(.EVALUATE=TRUE,.AS.REFERENCE=TRUE)
> str$length()
[1] 26
> 
> nd0 <- rng1$nextDouble(.EVALUATE=FALSE)
> nd1 <- s$def() %~% 'R.cached("@{toString(rng1)}").asInstanceOf[@{rng1[[\'type\']]}].nextDouble()'
> nd2 <- s$def() %~% '@{rng2}.nextDouble()'
> 
> library("microbenchmark")
> 
> microbenchmark(
+   runif(1),
+   rng1$nextDouble(),
+   rng2$nextDouble(),
+   nd0(),
+   nd1(),
+   nd2(),
+   times=500
+ )
Unit: microseconds
              expr      min        lq        mean    median        uq
          runif(1)    1.019    6.1450    9.309676    9.8380   12.5575
 rng1$nextDouble() 1040.021 1546.3090 2479.257792 2138.6590 2340.8655
 rng2$nextDouble()  985.130 1576.2970 2900.640970 2002.7870 2162.3335
             nd0()  185.976  256.6975  467.446062  401.4250  448.5570
             nd1()  184.667  238.6390  451.399894  394.4560  446.2115
             nd2()  178.016  247.5185  486.161398  385.3465  426.0810
        max neval
     65.608   500
  34747.195   500
 431209.637   500
  19896.811   500
   9252.478   500
  25795.724   500
> 
> ####
> 
> s$.scala.util.Random$nextDouble()
[1] 0.154585
> m <- s$.scala.util.Random$new(I(342L),.EVALUATE=FALSE)
> m(23436)$nextDouble()
[1] 0.8011135
> m(63202)$nextDouble()
[1] 0.8263897
> m(93222)$nextDouble()
[1] 0.4889048
> m(93332)$nextDouble()
[1] 0.5044919
> 
> n <- m(5)$nextDouble(.EVALUATE=FALSE)   # Wrapping with I() is not needed.
> n()
[1] 0.7305199
> n()
[1] 0.08825841
> n()
[1] 0.4889045
> 
> s$'.Array[Int]'$new(I(5L))
[1] 0 0 0 0 0
> 
> ####
> 
> s$a <- 1:10
> a <- s$.a
> a$apply(I(3L))
[1] 4
> tryCatch(a$apply(3L),error=function(e) e)
<console>:18: error: type mismatch;
 found   : Array[Int]
 required: Int
       a.apply(x1)}
               ^
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> 
> s$.scala.util.Random$nextDouble()
[1] 0.009159757
> s$.scala.util.Random$nextDouble()
[1] 0.9364283
> s$do("scala.util.Random")$nextDouble()
[1] 0.7766263
Warning message:
In s$do("scala.util.Random") :
  Syntax "s$do('scala.util.Random')" is deprecated.  Use "s$.scala.util.Random" instead.
> 
> s %@% 'import scala.util.Random'
> s$.Random$nextDouble()
[1] 0.4913716
> 
> a <- s$def() %~% 'Random.nextDouble'
> a()
[1] 0.5945706
> 
> s$.scala.util.Random
package scala.util
class Random extends scala.AnyRef with scala.Serializable {
  val self: java.util.Random = { /* compiled code */ }
  def this(self: java.util.Random) = { /* compiled code */ }
  def this(seed: scala.Long) = { /* compiled code */ }
  def this(seed: scala.Int) = { /* compiled code */ }
  def this() = { /* compiled code */ }
  def nextBoolean(): scala.Boolean = { /* compiled code */ }
  def nextBytes(bytes: scala.Array[scala.Byte]): scala.Unit = { /* compiled code */ }
  def nextDouble(): scala.Double = { /* compiled code */ }
  def nextFloat(): scala.Float = { /* compiled code */ }
  def nextGaussian(): scala.Double = { /* compiled code */ }
  def nextInt(): scala.Int = { /* compiled code */ }
  def nextInt(n: scala.Int): scala.Int = { /* compiled code */ }
  def nextLong(): scala.Long = { /* compiled code */ }
  def nextString(length: scala.Int): scala.Predef.String = { /* compiled code */ }
  def nextPrintableChar(): scala.Char = { /* compiled code */ }
  def setSeed(seed: scala.Long): scala.Unit = { /* compiled code */ }
  def shuffle[T, CC[X] <: scala.TraversableOnce[X]](xs: CC[T])(implicit bf: scala.collection.generic.CanBuildFrom[CC[T], T, CC[T]]): CC[T] = { /* compiled code */ }
  @scala.deprecated("Preserved for backwards binary compatibility. To remove in 2.12.x.")
  final def isAlphaNum$1(c: scala.Char): scala.Boolean = { /* compiled code */ }
  def alphanumeric: scala.collection.immutable.Stream[scala.Char] = { /* compiled code */ }
}
object Random extends scala.util.Random {
  def this() = { /* compiled code */ }
  implicit def javaRandomToRandom(r: java.util.Random): scala.util.Random = { /* compiled code */ }
}

ScalaInterpreterItem
> a <- ( s$def() %~% 'scala.util.Random' )()
> a$nextDouble(.EVALUATE=TRUE)
[1] 0.185623
> 
> ####
> 
> f <- s$def(x=s$null("(Int,Int)")) %~% 'x._1 + x._2'
> g <- s %~% "(300,400)"
> f(g)
[1] 700
> f(s %~% "(30,40)")
[1] 70
> 
> f2 <- s$def() %~% 'println("Yes")'
> f2()
Yes
> capture.output(f2())
Yes
character(0)
> 
> a <- s %.~% "(300,234)"
> f1 <- s$def(x=s$null("(Int,Int)"),y=numeric()) %~% 'x._1 + x._2 + y.sum'
> f1(a,c(2,3,4,6))
[1] 549
> 
> f1 <- s$def(x=s$null("(Int,Int)"),y=s$null("Array[Double]")) %~% 'x._1 + x._2 + y.sum'
> b <- s %.~% "Array[Double](2,3,4,5)"
> f1(a,b)
[1] 548
> 
> ####
> 
> (s$def() %~% 'println("Yes")')()
Yes
> (s$def() %~% '0')()
[1] 0
> (s$def() %~% 'null')()
> 
> ####
> 
> tryCatch((s$def() %~% 'a+b')(),error = function(e) e)
<console>:17: error: not found: value b
       a+b}
         ^
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((s$def() %~% 'a+')(),error = function(e) e)
<console>:17: error: missing argument list for method + in class any2stringadd
Unapplied methods are only converted to functions when a function type is expected.
You can make this conversion explicit by writing `$plus _` or `$plus(_)` instead of `$plus`.
       a+}
        ^
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((s$def() %~% 'import org.asdfad')(),error = function(e) {e})
<console>:16: error: object asdfad is not a member of package org
       import org.asdfad}
              ^
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((s$def() %~% 'throw new RuntimeException()')(),error = function(e) {e})
java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.ScalaServer.doInvoke(ScalaServer.scala:126)
	at org.ddahl.rscala.ScalaServer.org$ddahl$rscala$ScalaServer$$heart(ScalaServer.scala:510)
	at org.ddahl.rscala.ScalaServer.run(ScalaServer.scala:537)
	at org.ddahl.rscala.Main$.delayedEndpoint$org$ddahl$rscala$Main$1(Main.scala:5)
	at org.ddahl.rscala.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:35)
	at scala.App$class.main(App.scala:76)
	at org.ddahl.rscala.Main$.main(Main.scala:3)
	at org.ddahl.rscala.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)
	at scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
Caused by: java.lang.RuntimeException
	at $line109.$read$$iw$$iw$$anonfun$1.apply(<console>:16)
	at $line109.$read$$iw$$iw$$anonfun$1.apply(<console>:15)
	... 35 more
java.lang.reflect.InvocationTargetException
java.lang.RuntimeException
<simpleError in (s$def() %~% "throw new RuntimeException()")(): Invocation error.>
> s %~% "5+6"   # Everything's still okay!
[1] 11
> 
> 
