> heap.maximum <- "64M"
> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # FALSE # TRUE
> 
> tryCatch(a <- s$".Array[Double]"$new(20000000L),error=function(e) e)
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.server.ScalaServer.doInvoke(ScalaServer.scala:128)
	at org.ddahl.rscala.server.ScalaServer.org$ddahl$rscala$server$ScalaServer$$heart(ScalaServer.scala:512)
	at org.ddahl.rscala.server.ScalaServer.run(ScalaServer.scala:539)
	at org.ddahl.rscala.server.Main$.delayedEndpoint$org$ddahl$rscala$server$Main$1(Main.scala:5)
	at org.ddahl.rscala.server.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:35)
	at scala.App$class.main(App.scala:76)
	at org.ddahl.rscala.server.Main$.main(Main.scala:3)
	at org.ddahl.rscala.server.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)
	at scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
Caused by: java.lang.OutOfMemoryError: Java heap space
	at $line6.$read$$iw$$iw$$anonfun$1.apply(<console>:18)
	at $line6.$read$$iw$$iw$$anonfun$1.apply(<console>:16)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.server.ScalaServer.doInvoke(ScalaServer.scala:128)
	at org.ddahl.rscala.server.ScalaServer.org$ddahl$rscala$server$ScalaServer$$heart(ScalaServer.scala:512)
	at org.ddahl.rscala.server.ScalaServer.run(ScalaServer.scala:539)
	at org.ddahl.rscala.server.Main$.delayedEndpoint$org$ddahl$rscala$server$Main$1(Main.scala:5)
	at org.ddahl.rscala.server.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:35)
	at scala.App$class.main(App.scala:76)
	at org.ddahl.rscala.server.Main$.main(Main.scala:3)
	at org.ddahl.rscala.server.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)
	at scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)
java.lang.reflect.InvocationTargetException
java.lang.OutOfMemoryError: Java heap space
<simpleError in f(...): Invocation error.>
> close(s)
> cat("----\n")
----
> 
> heap.maximum <- "386M"
> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # FALSE # TRUE
> tryCatch(a <- s$".Array[Double]"$new(20000000L),error=function(e) e)
> close(s)
> cat("----\n")
----
> 
> options(rscala.heap.maximum="64M")
> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # FALSE # TRUE
> tryCatch(a <- s$".Array[Double]"$new(20000000L),error=function(e) e)
> close(s)
> cat("----\n")
----
> 
> options(rscala.heap.maximum="128M")
> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # FALSE # TRUE
> for ( i in 1:2000 ) {
+   a <- s$".Array[Double]"$new(100000L)  # No memory problems
+ }
> 
> tryCatch({
+ for ( i in 1:2000 ) {
+   s %~% "new Array[Double](100000)"           # Memory problems
+ }
+ },error=function(e) e)
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at scala.tools.nsc.typechecker.Namers$Namer.checkSelectors(Namers.scala:549)
	at scala.tools.nsc.typechecker.Namers$Namer.importSig(Namers.scala:1553)
	at scala.tools.nsc.typechecker.Namers$Namer.getSig$1(Namers.scala:1647)
	at scala.tools.nsc.typechecker.Namers$Namer.typeSig(Namers.scala:1650)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1$$anonfun$apply$1.apply$mcV$sp(Namers.scala:869)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1$$anonfun$apply$1.apply(Namers.scala:868)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1$$anonfun$apply$1.apply(Namers.scala:868)
	at scala.tools.nsc.typechecker.Namers$Namer.scala$tools$nsc$typechecker$Namers$Namer$$logAndValidate(Namers.scala:1677)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1.apply(Namers.scala:868)
	at scala.tools.nsc.typechecker.Namers$Namer$$anonfun$monoTypeCompleter$1.apply(Namers.scala:860)
	at scala.tools.nsc.typechecker.Namers$$anon$1.completeImpl(Namers.scala:1799)
	at scala.tools.nsc.typechecker.Namers$LockingTypeCompleter$class.complete(Namers.scala:1807)
	at scala.tools.nsc.typechecker.Namers$$anon$1.complete(Namers.scala:1797)
	at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1535)
	at scala.reflect.internal.Symbols$Symbol.initialize(Symbols.scala:1680)
	at scala.tools.nsc.typechecker.Typers$Typer.scala$tools$nsc$typechecker$Typers$Typer$$typedStat$1(Typers.scala:3026)
	at scala.tools.nsc.typechecker.Typers$Typer$$anonfun$65.apply(Typers.scala:3150)
	at scala.tools.nsc.typechecker.Typers$Typer$$anonfun$65.apply(Typers.scala:3150)
	at scala.collection.immutable.List.loop$1(List.scala:176)
	at scala.collection.immutable.List.mapConserve(List.scala:200)
	at scala.tools.nsc.typechecker.Typers$Typer.typedStats(Typers.scala:3150)
	at scala.tools.nsc.typechecker.Typers$Typer.typedTemplate(Typers.scala:1916)
	at scala.tools.nsc.typechecker.Typers$Typer.typedModuleDef(Typers.scala:1803)
	at scala.tools.nsc.typechecker.Typers$Typer.typedMemberDef$1(Typers.scala:5337)
	at scala.tools.nsc.typechecker.Typers$Typer.typed1(Typers.scala:5386)
	at scala.tools.nsc.typechecker.Typers$Typer.runTyper$1(Typers.scala:5423)
	at scala.tools.nsc.typechecker.Typers$Typer.scala$tools$nsc$typechecker$Typers$Typer$$typedInternal(Typers.scala:5450)
	at scala.tools.nsc.typechecker.Typers$Typer.body$2(Typers.scala:5397)
	at scala.tools.nsc.typechecker.Typers$Typer.typed(Typers.scala:5401)
	at scala.tools.nsc.interpreter.ReplGlobal$$anon$1$$anon$2.typed(ReplGlobal.scala:36)
	at scala.tools.nsc.typechecker.Typers$Typer.typedByValueExpr(Typers.scala:5481)
	at scala.tools.nsc.typechecker.Typers$Typer.scala$tools$nsc$typechecker$Typers$Typer$$typedStat$1(Typers.scala:3042)
java.lang.OutOfMemoryError: GC overhead limit exceeded
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Exception thrown.>
> 
> 
> 
