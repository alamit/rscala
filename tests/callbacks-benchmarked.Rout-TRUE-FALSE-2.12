> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-04-25 r72623) # ramah # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     50.808     89.157    401.1267    108.505    126.288
 doit1(rnorm(10)) 571207.926 655774.089 844141.4432 856424.947 947612.528
 doit2(rnorm(10)) 316790.151 386856.729 545717.8246 524877.465 560874.298
 doit3(rnorm(10))   4591.852   4603.795   8471.2579   6967.528  10180.046
 doit4(rnorm(10))   2818.581   2921.290   3940.7646   3155.212   3772.848
         max neval
    3111.643    10
 1240798.302    10
  930187.463    10
   19739.396    10
    8529.341    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean   median        uq      max
 doit0(rnorm(10))   17.736   33.551   58.47089   43.683   70.8715  2152.30
 doit3(rnorm(10)) 1362.144 1651.386 2885.49442 2099.225 3665.1145 48305.43
 doit4(rnorm(10))  745.675  948.939 1731.49984 1269.155 2260.1665 25556.38
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.2934 200.3382 200.3476 200.3612 200.3719 200.3732     5
 doit1(rnorm(10)) 451.4080 462.4421 516.4998 480.5171 566.3153 621.8164     5
 doit2(rnorm(10)) 374.3356 379.0644 446.3578 424.5358 491.5351 562.3180     5
 doit3(rnorm(10)) 202.9249 203.5414 204.4033 203.9452 204.1913 207.4138     5
 doit4(rnorm(10)) 202.0198 202.0834 202.2550 202.2419 202.2560 202.6741     5
> 
> 
