> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     51.856     82.478    494.8257    154.7385    183.700
 doit1(rnorm(10)) 568639.737 625711.489 821607.9925 817654.6870 957599.725
 doit2(rnorm(10)) 307751.100 435873.850 519615.9424 486260.9665 576863.121
 doit3(rnorm(10))   4021.024   4569.664   5523.7379   5516.2345   6493.088
 doit4(rnorm(10))   2433.379   2767.894   3390.7131   3121.3920   3686.858
         max neval
    3744.355    10
 1052856.211    10
  818057.365    10
    7310.956    10
    5798.857    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean    median       uq       max
 doit0(rnorm(10))   31.343   62.533   83.05913   74.6745  102.415   1814.21
 doit3(rnorm(10)) 2534.668 2873.641 4448.52945 4150.0630 4857.407  59675.39
 doit4(rnorm(10)) 1270.769 1641.063 2940.32389 2413.1755 2946.146 142692.67
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4664 200.4825 201.3467 200.5308 200.5697  204.6839     5
 doit1(rnorm(10)) 740.3234 764.5071 861.5604 824.8805 971.6122 1006.4787     5
 doit2(rnorm(10)) 472.8111 493.0181 569.6472 584.7208 609.9283  687.7576     5
 doit3(rnorm(10)) 204.9508 205.7232 208.0403 206.1953 209.2765  214.0554     5
 doit4(rnorm(10)) 204.1325 206.5464 207.0835 207.2299 207.5049  210.0037     5
> 
> 
