> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median          uq
 doit0(rnorm(10))     52.560     83.988    399.7964    100.9865     108.691
 doit1(rnorm(10)) 577144.976 736476.626 929890.4702 903247.4795 1055103.628
 doit2(rnorm(10)) 413933.297 432891.501 577920.4114 510086.4320  624955.924
 doit3(rnorm(10))   3646.198   3950.357   8367.1308   4147.8415   16626.600
 doit4(rnorm(10))   2286.272   2374.952   3955.2313   2447.6255    3017.095
         max neval
    3153.607    10
 1429741.533    10
  964503.514    10
   19601.566    10
   16228.737    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq       max
 doit0(rnorm(10))   21.869   48.2805   69.98503   69.438   91.3555   339.299
 doit3(rnorm(10)) 1723.030 2887.3645 3804.72205 3634.066 3975.3985 50928.690
 doit4(rnorm(10))  957.106 1679.9280 2318.59095 2189.244 2455.8755 59116.182
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3179 200.3468 202.8211 200.3979 200.4192 212.6236     5
 doit1(rnorm(10)) 420.5382 447.2396 479.7950 458.0996 516.0994 556.9982     5
 doit2(rnorm(10)) 364.3943 369.4015 411.3293 414.6844 442.6369 465.5295     5
 doit3(rnorm(10)) 202.7993 202.9002 203.6789 203.1187 204.4001 205.1765     5
 doit4(rnorm(10)) 201.6114 202.1392 202.1772 202.3147 202.3882 202.4325     5
> 
> 
