
R Under development (unstable) (2016-07-05 r70861) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> 
> serialize <- as.logical(Sys.getenv("RSCALA_SERIALIZE"))
> cat(serialize,"\n")
TRUE 
> s <- scalaInterpreter(serialize=serialize)
Loading /tmp/RtmpCXqPWY/rscala-737018c3f914...
> 
> cat(s %~% "util.Properties.versionNumberString","\n")
2.11.8 
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   c(f(x),g(x))
+ }
> 
> doit0(rnorm(10))
[1] -0.8205441  1.1364478
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] -0.09695784  2.23816280
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] 0.4283107 2.3806052
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- s$def('x: Array[Double]','
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ ')
> 
> doit3(rnorm(10))
[1] 0.2708911 2.4499903
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     33.962     49.018     78.6432     91.8575     97.390
 doit1(rnorm(10)) 292010.411 319816.929 372742.7286 356562.4675 431436.398
 doit2(rnorm(10)) 187592.926 198431.789 235557.8608 213575.4765 253375.809
 doit3(rnorm(10))   2055.253   2201.561   2359.1664   2368.6035   2471.392
        max neval
    102.136    10
 464930.145    10
 386496.344    10
   2669.889    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean  median        uq      max
 doit0(rnorm(10))   28.715   33.4175   39.60466   40.00   42.9425  117.770
 doit3(rnorm(10)) 1288.090 1410.9275 1582.19615 1461.93 1639.3780 5576.553
 neval
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4279 200.5236 200.5173 200.5324 200.5470 200.5556     5
 doit1(rnorm(10)) 535.9577 567.7788 573.9361 584.5055 584.5549 596.8837     5
 doit2(rnorm(10)) 391.1108 392.6062 404.6927 397.2272 403.6210 438.8983     5
 doit3(rnorm(10)) 204.3220 204.6153 204.9518 205.1531 205.1559 205.5128     5
> 
> 
> proc.time()
   user  system elapsed 
  1.908   0.284  20.643 
