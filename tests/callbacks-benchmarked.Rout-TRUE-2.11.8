
R Under development (unstable) (2016-07-05 r70861) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> 
> serialize <- as.logical(Sys.getenv("RSCALA_SERIALIZE"))
> cat(serialize,"\n")
TRUE 
> s <- scalaInterpreter(serialize=serialize)
Loading /tmp/Rtmp5i2YPw/rscala-2a6279b46efd...
> 
> cat(s %~% "util.Properties.versionNumberString","\n")
2.11.8 
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   c(f(x),g(x))
+ }
> 
> doit0(rnorm(10))
[1] -0.09743101  0.95198491
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] -0.1250778  1.4481948
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -1.206827  2.082938
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- s$def('x: Array[Double]','
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ ')
> 
> doit3(rnorm(10))
[1] 0.5968094 2.5281228
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     34.596     54.697     76.0106     61.336     97.865
 doit1(rnorm(10)) 315934.462 365378.072 386405.8442 375821.764 382915.830
 doit2(rnorm(10)) 217101.370 235376.349 249187.8502 244731.824 263502.497
 doit3(rnorm(10))   1920.202   2001.046   2352.0658   2245.375   2574.798
        max neval
    152.620    10
 533096.229    10
 287641.464    10
   3279.235    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median       uq      max
 doit0(rnorm(10))   30.149   35.6905   43.66666   43.288   46.833  137.147
 doit3(rnorm(10)) 1326.642 1498.6510 1782.66067 1702.023 1920.382 6146.312
 neval
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4592 200.5122 200.5090 200.5231 200.5236 200.5269     5
 doit1(rnorm(10)) 518.5462 520.1562 538.1938 529.2150 554.2804 568.7712     5
 doit2(rnorm(10)) 405.5239 418.6439 429.1236 422.7426 443.6921 455.0155     5
 doit3(rnorm(10)) 203.3946 203.5287 204.1261 203.5505 204.7473 205.4094     5
> 
> 
> proc.time()
   user  system elapsed 
  2.084   0.356  21.994 
