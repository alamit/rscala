> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq       mean     median          uq
 doit0(rnorm(10))     74.867     94.617   1207.174    161.040     163.988
 doit1(rnorm(10)) 541635.274 610098.812 934452.910 896046.852 1152969.501
 doit2(rnorm(10)) 295194.948 324309.446 566236.668 468470.960  824907.524
 doit3(rnorm(10))   2942.796   5129.201  10785.019   5768.050   20801.942
 doit4(rnorm(10))   1802.145   2365.903   3807.930   2992.139    4313.785
         max neval
   10881.543    10
 1714808.347    10
 1083267.016    10
   27101.243    10
    9848.579    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq       max
 doit0(rnorm(10))   29.517   68.9765   91.28918   89.236  109.3135  2235.682
 doit3(rnorm(10)) 2368.231 3937.5485 4888.80404 4521.369 4791.3060 63301.267
 doit4(rnorm(10)) 1238.922 2294.5490 3074.05773 2711.172 2938.4620 87370.174
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq      mean   median        uq       max
 doit0(rnorm(10)) 200.4402 200.4525  200.4796 200.4662  200.4691  200.5698
 doit1(rnorm(10)) 751.4043 838.9729 1010.1370 857.1459 1125.1282 1478.0337
 doit2(rnorm(10)) 784.7170 811.4686  885.9390 829.4920  951.9886 1052.0288
 doit3(rnorm(10)) 204.6924 205.6635  208.4544 206.6882  208.7950  216.4328
 doit4(rnorm(10)) 203.2382 204.7449  205.7941 204.8046  206.7348  209.4479
 neval
     5
     5
     5
     5
     5
> 
> 
