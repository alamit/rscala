> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     52.064     91.274    380.2765    105.190    120.580
 doit1(rnorm(10)) 683320.544 764763.096 928313.3075 893701.432 987910.519
 doit2(rnorm(10)) 466337.909 541671.007 703428.7893 582411.914 653728.585
 doit3(rnorm(10))   3858.442   4323.825  10663.7893   5375.352   7628.736
 doit4(rnorm(10))   2246.956   2564.465   6294.0170   4037.574   5416.438
         max neval
    2917.858    10
 1323105.721    10
 1428393.165    10
   39016.938    10
   18141.976    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median       uq      max
 doit0(rnorm(10))   17.762   46.2175   68.12848   71.5805   89.598   346.45
 doit3(rnorm(10)) 1552.409 3098.9310 3819.72298 3557.5975 3885.839 43433.84
 doit4(rnorm(10))  891.817 1832.6995 2363.68634 2153.1010 2382.735 43220.92
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3347 200.3402 200.4029 200.4217 200.4219 200.4961     5
 doit1(rnorm(10)) 438.0212 481.2271 494.3757 501.8070 509.1826 541.6409     5
 doit2(rnorm(10)) 334.2944 396.7925 402.2579 424.1826 427.9898 428.0303     5
 doit3(rnorm(10)) 203.1144 203.6545 204.0208 203.7850 204.3464 205.2035     5
 doit4(rnorm(10)) 201.7085 201.9400 202.9276 201.9845 203.2257 205.7794     5
> 
> 
