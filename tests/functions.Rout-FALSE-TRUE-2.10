> jars <- c("commons-math3-3.2.jar","shallot.jar")
> source("common.R",print.eval=TRUE)
# R version 3.3.3 (2017-03-06) # ramah # FALSE # TRUE
> 
> tryCatch(s %~% 'new org.apache.commons.math3.random.EmpiricalDistribution()',error=function(e) e)   # Scala 2.11.x class loader is weird.  This line avoid subsequent problems.
package org.apache.commons.math3.random;
class EmpiricalDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution {
  final var upperBounds: scala.Array[scala.Double];
  final var loaded: scala.Boolean;
  final val binCount: scala.Int;
  final var delta: scala.Double;
  final var min: scala.Double;
  final var max: scala.Double;
  final var sampleStats: org.apache.commons.math3.stat.descriptive.SummaryStatistics;
  final val binStats: java.util.List;
  protected final val randomData: org.apache.commons.math3.random.RandomDataGenerator;
  def getKernel(org.apache.commons.math3.stat.descriptive.SummaryStatistics): org.apache.commons.math3.distribution.RealDistribution;
  def cumBinP(scala.Int): scala.Double;
  def k(scala.Double): org.apache.commons.math3.distribution.RealDistribution;
  def kB(scala.Int): scala.Double;
  def pBminus(scala.Int): scala.Double;
  def pB(scala.Int): scala.Double;
  def reseedRandomGenerator(scala.Long): scala.Unit;
  def sample(): scala.Double;
  def isSupportConnected(): scala.Boolean;
  def isSupportUpperBoundInclusive(): scala.Boolean;
  def isSupportLowerBoundInclusive(): scala.Boolean;
  def getSupportUpperBound(): scala.Double;
  def getSupportLowerBound(): scala.Double;
  def getNumericalVariance(): scala.Double;
  def getNumericalMean(): scala.Double;
  def inverseCumulativeProbability(scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.OutOfRangeException
  def cumulativeProbability(scala.Double): scala.Double;
  def density(scala.Double): scala.Double;
  def probability(scala.Double): scala.Double;
  def reSeed(scala.Long): scala.Unit;
  def isLoaded(): scala.Boolean;
  def getGeneratorUpperBounds(): scala.Array[scala.Double];
  def getUpperBounds(): scala.Array[scala.Double];
  def getBinStats(): java.util.List;
  def getBinCount(): scala.Int;
  def getSampleStats(): org.apache.commons.math3.stat.descriptive.StatisticalSummary;
  def getNextValue(): scala.Double;
    throws org.apache.commons.math3.exception.MathIllegalStateException
  def findBin(scala.Double): scala.Int;
  def fillBinStats(org.apache.commons.math3.random.EmpiricalDistribution$DataAdapter): scala.Unit;
    throws java.io.IOException
  def load(java.io.File): scala.Unit;
    throws java.io.IOException, org.apache.commons.math3.exception.NullArgumentException
  def load(java.net.URL): scala.Unit;
    throws java.io.IOException, org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ZeroException
  def load(scala.Array[scala.Double]): scala.Unit;
    throws org.apache.commons.math3.exception.NullArgumentException
  def this(scala.Int, org.apache.commons.math3.random.RandomDataGenerator): scala.Unit;
  def this(org.apache.commons.math3.random.RandomDataImpl): scala.Unit;
  def this(scala.Int, org.apache.commons.math3.random.RandomDataImpl): scala.Unit;
  def this(org.apache.commons.math3.random.RandomGenerator): scala.Unit;
  def this(scala.Int, org.apache.commons.math3.random.RandomGenerator): scala.Unit;
  def this(scala.Int): scala.Unit;
  def this(): scala.Unit;
}
object EmpiricalDistribution {
  def access$100(org.apache.commons.math3.random.EmpiricalDistribution, scala.Double): scala.Int;
  def access$200(org.apache.commons.math3.random.EmpiricalDistribution): java.util.List;
  def access$302(org.apache.commons.math3.random.EmpiricalDistribution, org.apache.commons.math3.stat.descriptive.SummaryStatistics): org.apache.commons.math3.stat.descriptive.SummaryStatistics;
  def access$300(org.apache.commons.math3.random.EmpiricalDistribution): org.apache.commons.math3.stat.descriptive.SummaryStatistics;
  final val DEFAULT_BIN_COUNT: scala.Int;
  final val FILE_CHARSET: java.lang.String;
  final val serialVersionUID: scala.Long;
}
ScalaInterpreterReference... res1: org.apache.commons.math3.random.EmpiricalDistribution
> 
> 
> scalap(s,"org.apache.commons.math3.random.RandomDataGenerator")
package org.apache.commons.math3.random;
class RandomDataGenerator extends scala.AnyRef with java.io.Serializable with org.apache.commons.math3.random.RandomData {
  final var secRand: java.security.SecureRandom;
  final var rand: org.apache.commons.math3.random.RandomGenerator;
  def getNatural(scala.Int): scala.Array[scala.Int];
  def shuffle(scala.Array[scala.Int], scala.Int): scala.Unit;
  def getSecRan(): java.security.SecureRandom;
  def initRan(): scala.Unit;
  def getRandomGenerator(): org.apache.commons.math3.random.RandomGenerator;
  def setSecureAlgorithm(java.lang.String, java.lang.String): scala.Unit;
    throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
  def reSeed(): scala.Unit;
  def reSeedSecure(scala.Long): scala.Unit;
  def reSeedSecure(): scala.Unit;
  def reSeed(scala.Long): scala.Unit;
  def nextSample(java.util.Collection, scala.Int): scala.Array[scala.Any];
    throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextPermutation(scala.Int, scala.Int): scala.Array[scala.Int];
    throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextUniform(scala.Double, scala.Double, scala.Boolean): scala.Double;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
  def nextUniform(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
  def nextF(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextChiSquare(scala.Double): scala.Double;
  def nextCauchy(scala.Double, scala.Double): scala.Double;
  def nextBinomial(scala.Int, scala.Double): scala.Int;
  def nextBeta(scala.Double, scala.Double): scala.Double;
  def nextZipf(scala.Int, scala.Double): scala.Int;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextWeibull(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextT(scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextPascal(scala.Int, scala.Double): scala.Int;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.OutOfRangeException
  def nextHypergeometric(scala.Int, scala.Int, scala.Int): scala.Int;
    throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextGamma(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextExponential(scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextGaussian(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextPoisson(scala.Double): scala.Long;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextSecureLong(scala.Long, scala.Long): scala.Long;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextSecureInt(scala.Int, scala.Int): scala.Int;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextSecureHexString(scala.Int): java.lang.String;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextLong(scala.Long, scala.Long): scala.Long;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextInt(scala.Int, scala.Int): scala.Int;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextHexString(scala.Int): java.lang.String;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def this(org.apache.commons.math3.random.RandomGenerator): scala.Unit;
  def this(): scala.Unit;
}
object RandomDataGenerator {
  def nextLong(org.apache.commons.math3.random.RandomGenerator, scala.Long): scala.Long;
    throws java.lang.IllegalArgumentException
  def nextLong(java.security.SecureRandom, scala.Long): scala.Long;
    throws java.lang.IllegalArgumentException
  final val serialVersionUID: scala.Long;
}
> s$.org.apache.commons.math3.random.RandomDataGenerator
package org.apache.commons.math3.random;
class RandomDataGenerator extends scala.AnyRef with java.io.Serializable with org.apache.commons.math3.random.RandomData {
  final var secRand: java.security.SecureRandom;
  final var rand: org.apache.commons.math3.random.RandomGenerator;
  def getNatural(scala.Int): scala.Array[scala.Int];
  def shuffle(scala.Array[scala.Int], scala.Int): scala.Unit;
  def getSecRan(): java.security.SecureRandom;
  def initRan(): scala.Unit;
  def getRandomGenerator(): org.apache.commons.math3.random.RandomGenerator;
  def setSecureAlgorithm(java.lang.String, java.lang.String): scala.Unit;
    throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
  def reSeed(): scala.Unit;
  def reSeedSecure(scala.Long): scala.Unit;
  def reSeedSecure(): scala.Unit;
  def reSeed(scala.Long): scala.Unit;
  def nextSample(java.util.Collection, scala.Int): scala.Array[scala.Any];
    throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextPermutation(scala.Int, scala.Int): scala.Array[scala.Int];
    throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextUniform(scala.Double, scala.Double, scala.Boolean): scala.Double;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
  def nextUniform(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
  def nextF(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextChiSquare(scala.Double): scala.Double;
  def nextCauchy(scala.Double, scala.Double): scala.Double;
  def nextBinomial(scala.Int, scala.Double): scala.Int;
  def nextBeta(scala.Double, scala.Double): scala.Double;
  def nextZipf(scala.Int, scala.Double): scala.Int;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextWeibull(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextT(scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextPascal(scala.Int, scala.Double): scala.Int;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.OutOfRangeException
  def nextHypergeometric(scala.Int, scala.Int, scala.Int): scala.Int;
    throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextGamma(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextExponential(scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextGaussian(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextPoisson(scala.Double): scala.Long;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextSecureLong(scala.Long, scala.Long): scala.Long;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextSecureInt(scala.Int, scala.Int): scala.Int;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextSecureHexString(scala.Int): java.lang.String;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextLong(scala.Long, scala.Long): scala.Long;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextInt(scala.Int, scala.Int): scala.Int;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextHexString(scala.Int): java.lang.String;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def this(org.apache.commons.math3.random.RandomGenerator): scala.Unit;
  def this(): scala.Unit;
}
object RandomDataGenerator {
  def nextLong(org.apache.commons.math3.random.RandomGenerator, scala.Long): scala.Long;
    throws java.lang.IllegalArgumentException
  def nextLong(java.security.SecureRandom, scala.Long): scala.Long;
    throws java.lang.IllegalArgumentException
  final val serialVersionUID: scala.Long;
}
ScalaInterpreterItem
> rdg <- s$.org.apache.commons.math3.random.RandomDataGenerator$new()
> 
> rdg$reSeed(I(39234L))
> rexp <- rdg$nextExponential(I(2),.EVALUATE=FALSE)
> 
> library(microbenchmark)
> options(width=120)
> microbenchmark(rdg$nextExponential(I(4)),rexp(4),times=1000L)
Unit: microseconds
                      expr      min       lq      mean    median       uq       max neval
 rdg$nextExponential(I(4)) 1035.395 1152.758 1552.7914 1231.2540 1805.947 23065.689  1000
                   rexp(4)  208.795  281.819  384.9042  304.6365  386.605  5521.803  1000
> microbenchmark(rdg$nextExponential(I(4)),rexp(4),times=1000L)
Unit: microseconds
                      expr      min        lq      mean   median       uq      max neval
 rdg$nextExponential(I(4)) 1081.015 1125.3375 1311.1114 1158.351 1254.868 27950.78  1000
                   rexp(4)  227.262  271.1795  309.2182  280.172  298.147  7269.74  1000
> microbenchmark(rdg$nextExponential(I(4)),rexp(4),times=1000L)
Unit: microseconds
                      expr      min       lq      mean    median        uq       max neval
 rdg$nextExponential(I(4)) 1070.383 1119.321 1312.4354 1146.8550 1226.6935 32226.598  1000
                   rexp(4)  256.036  270.090  306.0647  278.5475  295.2035  3987.381  1000
> 
> s$.org.ddahl.shallot.parameter.Mass
package org.ddahl.shallot.parameter
class Mass extends org.ddahl.shallot.parameter.PositiveRealNumber {
  def this(value : scala.Double) = { /* compiled code */ }
  val logValue : scala.Double = { /* compiled code */ }
  val logGammaValue : scala.Double = { /* compiled code */ }
}
object Mass extends scala.AnyRef {
  def this() = { /* compiled code */ }
  def apply(value : scala.Double) : org.ddahl.shallot.parameter.Mass = { /* compiled code */ }
  def factory(mass : org.ddahl.shallot.parameter.Mass) : scala.Function0[org.ddahl.shallot.parameter.Mass] = { /* compiled code */ }
  def factory(value : scala.Double) : scala.Function0[org.ddahl.shallot.parameter.Mass] = { /* compiled code */ }
  def factory(shape : scala.Double, rate : scala.Double, rdg : org.apache.commons.math3.random.RandomDataGenerator) : scala.Function0[org.ddahl.shallot.parameter.Mass] = { /* compiled code */ }
}

ScalaInterpreterItem
> massFactory3 <- s$.org.ddahl.shallot.parameter.Mass$factory(I(1.0),I(3.0),rdg)
> s %~% "3+4"
[1] 7
> 
> mass <- s$.org.ddahl.shallot.parameter.Mass$apply(I(3.4))
> massFactory1 <- s$.org.ddahl.shallot.parameter.Mass$factory(mass)
> massFactory2 <- s$.org.ddahl.shallot.parameter.Mass$factory(I(3.0))
> massFactory3 <- s$.org.ddahl.shallot.parameter.Mass$factory(I(1.0),I(3.0),rdg)
> massFactory3$apply()$logValue()
[1] -2.27295
> massFactory3$apply()$logValue()
[1] -3.893189
> massFactory3$apply()$logValue()
[1] -2.183371
> 
> 
> 
> s %@% '
+ class Bob {
+ 
+   val a = 3.0
+   var b = 4.0
+ 
+   def sum(c: Int) = { a + b + c }
+ 
+ }
+ '
> 
> d <- s$.Bob$new()
> d[['type']]                           # Note the weird 'iw$' prepended to 'Bob'
[1] "iw$Bob"
> tryCatch(d$b(),error=function(e) e)   # Doesn't work
<console>:12: error: not found: type iw$Bob
              R.cached(".9").asInstanceOf[iw$Bob].b}
                                          ^
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> 
> d[['type']] <- "Bob"     # Cast it to be 'Bob'
> d$b()                    # Now it does
[1] 4
> 
> d$sum(I(4L))
[1] 11
> m <- d$sum(I(5L),.EVALUATE=FALSE)
> 
> m(3)                                                   # Casting is not necessary here
[1] 10
> d$sum(I(as.integer(3)))                                # But it is here
[1] 10
> 
> 
