
R version 3.2.4 (2016-03-10) -- "Very Secure Dishes"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> 
> serialize <- as.logical(Sys.getenv("RSCALA_SERIALIZE"))
> output <- as.logical(Sys.getenv("RSCALA_OUTPUT"))
> version <- Sys.getenv("RSCALA_SCALA_VERSION")
> s <- scala(c("commons-math3-3.2.jar","shallot.jar"),serialize=serialize,stdout=output,stderr=output)
> if ( version != s %~% "scala.util.Properties.versionNumberString" ) stop("Version mismatch.")
> 
> scalap(s,"org.apache.commons.math3.random.RandomDataGenerator")
> rdg <- tryCatch(s$do("org.apache.commons.math3.random.RandomDataGenerator")$new(),error=function(e) e)  # There is some incompatability between Scala REPL classloader and the Apache Commons Math jar.
> rdg <- s$do("org.apache.commons.math3.random.RandomDataGenerator")$new()                                # Rerun and it works fine.
> rdg$reSeed(39234L)
> rexp <- rdg$nextExponential(2,evaluate=FALSE)
> 
> library(microbenchmark)
> options(width=120)
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr      min       lq     mean   median       uq      max neval
 rdg$nextExponential(4) 1035.875 1312.459 7157.603 1488.773 8623.444 153272.7  1000
                rexp(4)  877.580 1134.448 6401.714 1286.457 7052.752 204117.5  1000
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr      min       lq      mean   median       uq      max neval
 rdg$nextExponential(4) 1004.119 1325.191 11130.675 3281.642 10289.56 239162.4  1000
                rexp(4)  872.659 1147.341  7825.533 2537.488  8019.69 228913.2  1000
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr     min       lq      mean   median        uq      max neval
 rdg$nextExponential(4) 992.012 1357.090 11186.249 4549.873 11546.417 175443.4  1000
                rexp(4) 875.132 1176.676  9601.958 2917.731  9231.585 196680.2  1000
> 
> massFactory3 <- s$do("org.ddahl.shallot.parameter.Mass")$factory(1.0,3.0,rdg)
> s %~% "3+4"
[1] 7
> 
> scalap(s,"org.ddahl.shallot.parameter.Mass")
> mass <- s$do("org.ddahl.shallot.parameter.Mass")$apply(3.4)
> massFactory1 <- s$do("org.ddahl.shallot.parameter.Mass")$factory(mass)
> massFactory2 <- s$do("org.ddahl.shallot.parameter.Mass")$factory(3.0)
> massFactory3 <- s$do("org.ddahl.shallot.parameter.Mass")$factory(1.0,3.0,rdg)
> massFactory3$apply()$logValue()
[1] -2.27295
> massFactory3$apply()$logValue()
[1] -3.893189
> massFactory3$apply()$logValue()
[1] -2.183371
> 
> 
> 
> s %~% '
+ class Bob {
+ 
+   val a = 3.0
+   var b = 4.0
+ 
+   def sum(c: Int) = { a + b + c }
+ 
+ }
+ '
ScalaInterpreterReference... res11: org.ddahl.shallot.parameter.Mass => Double
> 
> d <- s$do("Bob")$new()
> d[['type']]                           # Note the weird 'iw$' prepended to 'Bob'
[1] "iw$Bob"
> tryCatch(d$b(),error=function(e) e)   # Doesn't work
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Evaluation error.>
> 
> d[['type']] <- "Bob"     # Cast it to be 'Bob'
> d$b()                    # Now it does
[1] 4
> 
> d$sum(as.integer(4))
[1] 11
> m <- d$sum(as.integer(5),evaluate=FALSE)
> 
> m(3)                                    # Casting is not necessary here
[1] 10
> d$sum(as.integer(3))                    # But it is here
[1] 10
> tryCatch(d$sum(3),error=function(e) e)  # and here
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Evaluation error.>
> 
> 
