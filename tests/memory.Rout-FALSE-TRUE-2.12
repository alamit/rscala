> heap.maximum <- "64M"
> source("common.R",print.eval=TRUE)
# R version 3.3.2 (2016-10-31) # sidon # FALSE # TRUE
> 
> tryCatch(a <- s$".Array[Double]"$new(I(20000000L)),error=function(e) e)
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.ScalaServer.doInvoke(ScalaServer.scala:158)
	at org.ddahl.rscala.ScalaServer.heart(ScalaServer.scala:492)
	at org.ddahl.rscala.ScalaServer.run(ScalaServer.scala:519)
	at org.ddahl.rscala.Main$.delayedEndpoint$org$ddahl$rscala$Main$1(Main.scala:5)
	at org.ddahl.rscala.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0.apply$mcV$sp(Function0.scala:34)
	at scala.Function0.apply$mcV$sp$(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App.$anonfun$main$1$adapted(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:378)
	at scala.App.main(App.scala:76)
	at scala.App.main$(App.scala:74)
	at org.ddahl.rscala.Main$.main(Main.scala:3)
	at org.ddahl.rscala.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader.$anonfun$run$2(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader.asContext(ScalaClassLoader.scala:32)
	at scala.reflect.internal.util.ScalaClassLoader.asContext$(ScalaClassLoader.scala:30)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:129)
	at scala.reflect.internal.util.ScalaClassLoader.run(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader.run$(ScalaClassLoader.scala:90)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:129)
	at scala.tools.nsc.CommonRunner.run(ObjectRunner.scala:22)
	at scala.tools.nsc.CommonRunner.run$(ObjectRunner.scala:21)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner.runAndCatch(ObjectRunner.scala:29)
	at scala.tools.nsc.CommonRunner.runAndCatch$(ObjectRunner.scala:28)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:61)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:88)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:99)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:104)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
Caused by: java.lang.OutOfMemoryError: Java heap space
	at $line5.$read$$iw$$iw$.$anonfun$res1$1(<console>:15)
	at $line5.$read$$iw$$iw$$$Lambda$985/938199512.apply(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.ScalaServer.doInvoke(ScalaServer.scala:158)
	at org.ddahl.rscala.ScalaServer.heart(ScalaServer.scala:492)
	at org.ddahl.rscala.ScalaServer.run(ScalaServer.scala:519)
	at org.ddahl.rscala.Main$.delayedEndpoint$org$ddahl$rscala$Main$1(Main.scala:5)
	at org.ddahl.rscala.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0.apply$mcV$sp(Function0.scala:34)
	at scala.Function0.apply$mcV$sp$(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App.$anonfun$main$1$adapted(App.scala:76)
	at scala.App$$Lambda$96/1865127310.apply(Unknown Source)
	at scala.collection.immutable.List.foreach(List.scala:378)
	at scala.App.main(App.scala:76)
	at scala.App.main$(App.scala:74)
	at org.ddahl.rscala.Main$.main(Main.scala:3)
	at org.ddahl.rscala.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader.$anonfun$run$2(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader$$Lambda$95/231685785.apply(Unknown Source)
	at scala.reflect.internal.util.ScalaClassLoader.asContext(ScalaClassLoader.scala:32)
	at scala.reflect.internal.util.ScalaClassLoader.asContext$(ScalaClassLoader.scala:30)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:129)
	at scala.reflect.internal.util.ScalaClassLoader.run(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader.run$(ScalaClassLoader.scala:90)
java.lang.reflect.InvocationTargetException
java.lang.OutOfMemoryError: Java heap space
<simpleError in f(...): Invocation error.>
> close(s)
> cat("----\n")
----
> 
> heap.maximum <- "386M"
> source("common.R",print.eval=TRUE)
# R version 3.3.2 (2016-10-31) # sidon # FALSE # TRUE
> tryCatch(a <- s$".Array[Double]"$new(I(20000000L)),error=function(e) e)
> close(s)
> cat("----\n")
----
> 
> options(rscala.heap.maximum="64M")
> source("common.R",print.eval=TRUE)
# R version 3.3.2 (2016-10-31) # sidon # FALSE # TRUE
> tryCatch(a <- s$".Array[Double]"$new(I(20000000L)),error=function(e) e)
> close(s)
> cat("----\n")
----
> 
> options(rscala.heap.maximum="128M")
> source("common.R",print.eval=TRUE)
# R version 3.3.2 (2016-10-31) # sidon # FALSE # TRUE
> for ( i in 1:2000 ) {
+   a <- s$".Array[Double]"$new(I(100000L))  # No memory problems
+ }
> 
> tryCatch({
+ for ( i in 1:2000 ) {
+   s %~% "new Array[Double](100000)"           # Memory problems
+ }
+ },error=function(e) e)
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at scala.reflect.internal.Types$Type.findMemberInternal$1(Types.scala:1026)
	at scala.reflect.internal.Types$Type.findMember(Types.scala:1028)
	at scala.reflect.internal.tpe.TypeMaps$adaptToNewRunMap$.adaptToNewRun(TypeMaps.scala:1114)
	at scala.reflect.internal.tpe.TypeMaps$adaptToNewRunMap$.apply(TypeMaps.scala:1170)
	at scala.reflect.internal.tpe.TypeMaps$adaptToNewRunMap$.apply(TypeMaps.scala:1099)
	at scala.reflect.internal.tpe.TypeMaps$adaptToNewRunMap$.apply(TypeMaps.scala:1205)
	at scala.reflect.internal.Symbols$Symbol.adaptInfos(Symbols.scala:1643)
	at scala.reflect.internal.Symbols$Symbol.rawInfo(Symbols.scala:1595)
	at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1522)
	at scala.reflect.internal.Types$TypeRef.baseClasses(Types.scala:2277)
	at scala.reflect.internal.Types.computeBaseClasses(Types.scala:1460)
	at scala.reflect.internal.Types.computeBaseClasses$(Types.scala:1437)
	at scala.reflect.internal.SymbolTable.computeBaseClasses(SymbolTable.scala:16)
	at scala.reflect.internal.Types.$anonfun$defineBaseClassesOfCompoundType$2(Types.scala:1581)
	at scala.reflect.internal.Types$$Lambda$136/1254526270.apply(Unknown Source)
	at scala.reflect.internal.Types$CompoundType.memo(Types.scala:1408)
	at scala.reflect.internal.Types.defineBaseClassesOfCompoundType(Types.scala:1581)
	at scala.reflect.internal.Types.define$1(Types.scala:1548)
	at scala.reflect.internal.Types.defineBaseClassesOfCompoundType(Types.scala:1549)
	at scala.reflect.internal.Types.defineBaseClassesOfCompoundType$(Types.scala:1547)
	at scala.reflect.internal.SymbolTable.defineBaseClassesOfCompoundType(SymbolTable.scala:16)
	at scala.reflect.internal.Types$CompoundType.baseClasses(Types.scala:1391)
	at scala.reflect.internal.tpe.FindMembers$FindMemberBase.<init>(FindMembers.scala:17)
	at scala.reflect.internal.tpe.FindMembers$FindMember.<init>(FindMembers.scala:219)
	at scala.reflect.internal.Types$Type.findMemberInternal$1(Types.scala:1026)
	at scala.reflect.internal.Types$Type.findMember(Types.scala:1028)
	at scala.reflect.internal.Types$Type.memberBasedOnName(Types.scala:645)
	at scala.reflect.internal.Types$Type.nonPrivateMember(Types.scala:619)
	at scala.reflect.internal.Definitions$DefinitionsClass.$anonfun$getMemberIfDefined$1(Definitions.scala:1305)
	at scala.reflect.internal.Definitions$DefinitionsClass.getMemberIfDefined(Definitions.scala:1305)
	at scala.reflect.internal.Definitions$DefinitionsClass.getMember(Definitions.scala:1256)
	at scala.reflect.internal.Definitions$DefinitionsClass.getMemberMethod(Definitions.scala:1291)
java.lang.OutOfMemoryError: GC overhead limit exceeded
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Exception thrown.>
> 
> 
> 
