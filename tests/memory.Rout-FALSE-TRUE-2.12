
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> heap.maximum <- "64M"
> source("common.R",print.eval=TRUE)
FALSE TRUE
> 
> tryCatch(a <- s$do("Array[Double]")$new(I(20000000L)),error=function(e) e)
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.ScalaServer.doInvoke(ScalaServer.scala:187)
	at org.ddahl.rscala.ScalaServer.heart(ScalaServer.scala:552)
	at org.ddahl.rscala.ScalaServer.run(ScalaServer.scala:579)
	at org.ddahl.rscala.Main$.delayedEndpoint$org$ddahl$rscala$Main$1(Main.scala:5)
	at org.ddahl.rscala.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0.apply$mcV$sp(Function0.scala:34)
	at scala.Function0.apply$mcV$sp$(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App.$anonfun$main$1$adapted(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:378)
	at scala.App.main(App.scala:76)
	at scala.App.main$(App.scala:74)
	at org.ddahl.rscala.Main$.main(Main.scala:3)
	at org.ddahl.rscala.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader.$anonfun$run$2(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader.asContext(ScalaClassLoader.scala:32)
	at scala.reflect.internal.util.ScalaClassLoader.asContext$(ScalaClassLoader.scala:30)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:129)
	at scala.reflect.internal.util.ScalaClassLoader.run(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader.run$(ScalaClassLoader.scala:90)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:129)
	at scala.tools.nsc.CommonRunner.run(ObjectRunner.scala:22)
	at scala.tools.nsc.CommonRunner.run$(ObjectRunner.scala:21)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner.runAndCatch(ObjectRunner.scala:29)
	at scala.tools.nsc.CommonRunner.runAndCatch$(ObjectRunner.scala:28)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:61)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:88)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:99)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:104)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
Caused by: java.lang.OutOfMemoryError: Java heap space
	at $line5.$read$$iw$$iw$.$anonfun$res1$1(<console>:15)
	at $line5.$read$$iw$$iw$$$Lambda$985/841166421.apply(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.ScalaServer.doInvoke(ScalaServer.scala:187)
	at org.ddahl.rscala.ScalaServer.heart(ScalaServer.scala:552)
	at org.ddahl.rscala.ScalaServer.run(ScalaServer.scala:579)
	at org.ddahl.rscala.Main$.delayedEndpoint$org$ddahl$rscala$Main$1(Main.scala:5)
	at org.ddahl.rscala.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0.apply$mcV$sp(Function0.scala:34)
	at scala.Function0.apply$mcV$sp$(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App.$anonfun$main$1$adapted(App.scala:76)
	at scala.App$$Lambda$96/1865127310.apply(Unknown Source)
	at scala.collection.immutable.List.foreach(List.scala:378)
	at scala.App.main(App.scala:76)
	at scala.App.main$(App.scala:74)
	at org.ddahl.rscala.Main$.main(Main.scala:3)
	at org.ddahl.rscala.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader.$anonfun$run$2(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader$$Lambda$95/231685785.apply(Unknown Source)
	at scala.reflect.internal.util.ScalaClassLoader.asContext(ScalaClassLoader.scala:32)
	at scala.reflect.internal.util.ScalaClassLoader.asContext$(ScalaClassLoader.scala:30)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:129)
	at scala.reflect.internal.util.ScalaClassLoader.run(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader.run$(ScalaClassLoader.scala:90)
java.lang.reflect.InvocationTargetException
java.lang.OutOfMemoryError: Java heap space
<simpleError in f(...): Invocation error.>
> close(s)
> cat("----\n")
----
> 
> heap.maximum <- "386M"
> source("common.R",print.eval=TRUE)
FALSE TRUE
> tryCatch(a <- s$do("Array[Double]")$new(I(20000000L)),error=function(e) e)
> close(s)
> cat("----\n")
----
> 
> options(rscala.heap.maximum="64M")
> source("common.R",print.eval=TRUE)
FALSE TRUE
> tryCatch(a <- s$do("Array[Double]")$new(I(20000000L)),error=function(e) e)
> close(s)
> cat("----\n")
----
> 
> options(rscala.heap.maximum="128M")
> source("common.R",print.eval=TRUE)
FALSE TRUE
> for ( i in 1:2000 ) {
+   a <- s$do("Array[Double]")$new(I(100000L))  # No memory problems
+ }
> 
> tryCatch({
+ for ( i in 1:2000 ) {
+   s %~% "new Array[Double](100000)"           # Memory problems
+ }
+ },error=function(e) e)
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at scala.collection.TraversableOnce$$Lambda$123/1297685781.get$Lambda(Unknown Source)
	at java.lang.invoke.LambdaForm$DMH/685325104.invokeStatic_LL_L(LambdaForm$DMH)
	at java.lang.invoke.LambdaForm$MH/424058530.linkToTargetMethod(LambdaForm$MH)
	at scala.collection.TraversableOnce.foldLeft(TraversableOnce.scala:157)
	at scala.collection.TraversableOnce.foldLeft$(TraversableOnce.scala:155)
	at scala.collection.AbstractTraversable.foldLeft(Traversable.scala:104)
	at scala.collection.TraversableOnce.$div$colon(TraversableOnce.scala:151)
	at scala.collection.TraversableOnce.$div$colon$(TraversableOnce.scala:151)
	at scala.collection.AbstractTraversable.$div$colon(Traversable.scala:104)
	at scala.collection.SetLike.$plus$plus(SetLike.scala:150)
	at scala.collection.SetLike.$plus$plus$(SetLike.scala:150)
	at scala.collection.AbstractSet.$plus$plus(Set.scala:47)
	at scala.tools.nsc.transform.SpecializeTypes.loop$2(SpecializeTypes.scala:440)
	at scala.tools.nsc.transform.SpecializeTypes.specializedTypeVars(SpecializeTypes.scala:442)
	at scala.tools.nsc.transform.SpecializeTypes.specializedTypeVars(SpecializeTypes.scala:471)
	at scala.tools.nsc.transform.SpecializeTypes.$anonfun$specialOverrides$4(SpecializeTypes.scala:1004)
	at scala.tools.nsc.transform.SpecializeTypes.needsSpecialOverride$1(SpecializeTypes.scala:1003)
	at scala.tools.nsc.transform.SpecializeTypes.$anonfun$specialOverrides$9(SpecializeTypes.scala:1025)
	at scala.tools.nsc.transform.SpecializeTypes$$Lambda$432/1237598030.apply(Unknown Source)
	at scala.collection.TraversableLike.$anonfun$flatMap$1(TraversableLike.scala:241)
	at scala.collection.TraversableLike$$Lambda$86/1323468230.apply(Unknown Source)
	at scala.reflect.internal.Scopes$Scope.foreach(Scopes.scala:373)
	at scala.collection.TraversableLike.flatMap(TraversableLike.scala:241)
	at scala.collection.TraversableLike.flatMap$(TraversableLike.scala:238)
	at scala.reflect.internal.Scopes$Scope.flatMap(Scopes.scala:51)
	at scala.tools.nsc.transform.SpecializeTypes.specialOverrides(SpecializeTypes.scala:1024)
	at scala.tools.nsc.transform.SpecializeTypes.transformInfo(SpecializeTypes.scala:1215)
	at scala.tools.nsc.transform.InfoTransform$Phase$$anon$1.transform(InfoTransform.scala:38)
	at scala.reflect.internal.Symbols$Symbol.rawInfo(Symbols.scala:1605)
	at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1522)
	at scala.tools.nsc.transform.SpecializeTypes.$anonfun$transformInfo$2(SpecializeTypes.scala:1207)
	at scala.tools.nsc.transform.SpecializeTypes.$anonfun$transformInfo$1(SpecializeTypes.scala:1207)
java.lang.OutOfMemoryError: GC overhead limit exceeded
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> 
> 
> 
