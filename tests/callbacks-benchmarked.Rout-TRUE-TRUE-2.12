> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median          uq
 doit0(rnorm(10))     50.674     94.004    384.7001    106.859     113.007
 doit1(rnorm(10)) 738310.668 892621.492 979299.1401 980583.007 1077374.733
 doit2(rnorm(10)) 423673.064 529576.804 615461.8497 596924.644  711832.310
 doit3(rnorm(10))   3861.484   4341.953   7687.1749   6294.468    8515.683
 doit4(rnorm(10))   1961.038   2840.436   4125.4456   3233.622    4524.026
         max neval
    2981.012    10
 1251091.680    10
  889252.475    10
   18394.884    10
   10965.845    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq       max
 doit0(rnorm(10))   21.126   51.0505   83.12339   83.432   94.8575  7872.482
 doit3(rnorm(10)) 1917.438 3553.0255 4671.92072 3803.335 4118.1205 93422.106
 doit4(rnorm(10)) 1019.465 2127.2570 3078.50368 2314.497 2542.1740 48116.098
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3235 200.3457 200.4593 200.3715 200.4771 200.7787     5
 doit1(rnorm(10)) 405.2006 451.2762 608.2054 613.2676 674.3454 896.9371     5
 doit2(rnorm(10)) 323.3547 326.3139 463.5883 401.4779 630.7776 636.0172     5
 doit3(rnorm(10)) 202.5158 202.5500 202.8441 202.7926 202.7928 203.5693     5
 doit4(rnorm(10)) 201.9908 202.5276 203.3915 202.8398 202.9370 206.6624     5
> 
> 
