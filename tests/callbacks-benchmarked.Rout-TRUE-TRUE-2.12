> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median          uq
 doit0(rnorm(10))     81.275    108.864    597.2387    143.9915     184.768
 doit1(rnorm(10)) 478166.300 675606.113 810470.0788 824183.1715 1026114.325
 doit2(rnorm(10)) 335843.218 371504.548 515802.7482 508507.2580  610832.121
 doit3(rnorm(10))   3118.763   4910.957   7675.4390   5642.6830    9989.807
 doit4(rnorm(10))   1823.669   2571.890   5922.4989   3612.8640    4457.030
         max neval
    4735.616    10
 1051221.887    10
  787801.395    10
   17463.670    10
   18118.516    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq       max
 doit0(rnorm(10))   31.191   58.8885   77.41378   68.947   92.6885  2458.806
 doit3(rnorm(10)) 2258.894 2645.4630 3804.51159 3421.959 4438.5740 29086.529
 doit4(rnorm(10)) 1219.140 1473.9055 2336.53376 1757.037 2591.8135 77476.129
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4467 200.4550 200.5834 200.4806 200.5492 200.9857     5
 doit1(rnorm(10)) 758.0782 775.5488 796.9985 809.3707 809.5884 832.4062     5
 doit2(rnorm(10)) 535.8289 548.7009 628.6332 583.1834 637.6225 837.8302     5
 doit3(rnorm(10)) 205.1169 205.1988 207.5544 205.4118 206.9373 215.1073     5
 doit4(rnorm(10)) 203.2124 203.3864 205.2002 203.4613 203.9397 212.0011     5
> 
> 
