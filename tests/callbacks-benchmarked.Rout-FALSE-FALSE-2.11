> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-04-25 r72623) # ramah # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median          uq
 doit0(rnorm(10))     54.471     85.297    436.3249    108.402     127.623
 doit1(rnorm(10)) 505769.017 762052.561 882247.6300 880156.819 1134517.894
 doit2(rnorm(10)) 279570.403 372347.559 592110.3121 516939.372  773216.376
 doit3(rnorm(10))   2906.500   3639.308   5080.0049   4010.318    4915.183
 doit4(rnorm(10))   1561.460   1840.770   6798.0224   2359.702   13998.839
         max neval
    3261.545    10
 1173099.017    10
 1341793.046    10
   12955.980    10
   18790.131    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median       uq       max
 doit0(rnorm(10))   17.965   27.2015   41.64382   38.786   45.719  1212.304
 doit3(rnorm(10)) 1177.828 1503.9810 1902.36846 1597.424 1902.442 35922.789
 doit4(rnorm(10))  578.478  794.8295 1073.17133  851.182 1058.150 12976.075
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3773 200.4500 200.4582 200.4808 200.4899 200.4932     5
 doit1(rnorm(10)) 478.8999 511.7948 537.6619 516.5026 525.4561 655.6561     5
 doit2(rnorm(10)) 383.1054 406.1256 443.8617 435.1961 452.3996 542.4820     5
 doit3(rnorm(10)) 202.5686 202.7797 203.2153 203.3440 203.5859 203.7984     5
 doit4(rnorm(10)) 202.1344 202.5574 203.0413 202.8029 203.5832 204.1286     5
> 
> 
