> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median          uq
 doit0(rnorm(10))     50.395     92.988    454.8491    112.6375     136.438
 doit1(rnorm(10)) 498199.877 566200.513 827752.4647 779475.4630 1038918.837
 doit2(rnorm(10)) 194822.115 356738.423 515657.4321 420580.3285  617745.007
 doit3(rnorm(10))   3379.759   3641.270   4612.4376   4370.9720    5503.750
 doit4(rnorm(10))   1892.524   1998.398   2655.0685   2607.8280    3086.197
         max neval
    3315.952    10
 1336689.240    10
 1266198.142    10
    6313.028    10
    3527.051    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median       uq       max
 doit0(rnorm(10))   17.587   26.8465   39.39598   34.8920   44.874  1010.894
 doit3(rnorm(10)) 1144.082 1338.5715 1817.64344 1517.0615 1830.557 37095.400
 doit4(rnorm(10))  559.977  698.9955  954.51120  776.3735  929.664 19385.193
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.2680 200.2843 200.3740 200.4080 200.4253 200.4844     5
 doit1(rnorm(10)) 448.8557 481.9312 521.7130 507.5763 519.1872 651.0147     5
 doit2(rnorm(10)) 349.7658 388.2898 404.8246 413.9236 423.0195 449.1242     5
 doit3(rnorm(10)) 202.4985 202.5223 203.9388 203.6727 204.8306 206.1701     5
 doit4(rnorm(10)) 202.0576 202.6533 202.6290 202.6914 202.7483 202.9943     5
> 
> 
