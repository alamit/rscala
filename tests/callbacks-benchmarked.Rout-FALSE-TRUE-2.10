> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     52.400     91.123    404.6708    109.2105    124.463
 doit1(rnorm(10)) 481784.167 548975.313 606071.4049 577411.2370 662904.921
 doit2(rnorm(10)) 205303.508 290688.112 384789.4864 337748.5380 501918.565
 doit3(rnorm(10))   3359.871   3597.881   6017.1811   3716.0450   3956.732
 doit4(rnorm(10))   1863.561   2012.658   3988.9989   2237.2370   2942.452
       max neval
   3153.20    10
 750090.07    10
 696923.51    10
  16394.75    10
  19325.09    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean    median       uq       max
 doit0(rnorm(10))   17.642   28.784   39.25434   36.1025   41.417  1029.724
 doit3(rnorm(10)) 1237.986 1393.753 1768.82568 1443.9375 1641.084 32398.378
 doit4(rnorm(10))  599.811  721.702  939.12554  751.9305  882.669  8636.806
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3507 200.4015 200.4475 200.4476 200.4972 200.5405     5
 doit1(rnorm(10)) 342.8571 358.1357 371.6131 370.6710 372.3783 414.0236     5
 doit2(rnorm(10)) 276.4417 298.0553 381.0603 299.8744 356.7675 674.1628     5
 doit3(rnorm(10)) 203.0765 203.4273 204.0694 204.1440 204.5252 205.1738     5
 doit4(rnorm(10)) 201.4311 201.6086 202.8662 202.0368 202.8448 206.4097     5
> 
> 
