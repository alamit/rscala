> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     74.017    101.973    602.8074    150.0335    175.074
 doit1(rnorm(10)) 284510.121 428009.174 633468.1895 666208.6980 803654.423
 doit2(rnorm(10)) 218637.032 280823.202 405756.9365 311608.1975 646911.733
 doit3(rnorm(10))   3711.860   4057.981  15562.6043   4422.4270   9818.253
 doit4(rnorm(10))   1443.140   2000.500   3287.8781   2392.6080   3466.181
        max neval
   4819.838    10
 978003.022    10
 675542.376    10
  74723.109    10
   9657.019    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median       uq       max
 doit0(rnorm(10))   30.597   63.2065   90.53223   79.2675  105.083  4258.153
 doit3(rnorm(10)) 2005.367 3220.1010 4439.78446 3811.0045 4079.309 75947.994
 doit4(rnorm(10)) 1007.608 1689.2240 2185.60402 2072.0315 2236.189 32824.038
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.3965 200.4221 200.4256 200.4250 200.4420  200.4423     5
 doit1(rnorm(10)) 599.5590 657.0607 704.8375 722.0166 722.4742  823.0770     5
 doit2(rnorm(10)) 435.4780 440.3601 602.9155 441.1320 517.1080 1180.4997     5
 doit3(rnorm(10)) 204.0579 204.5006 205.6036 204.5683 207.3925  207.4986     5
 doit4(rnorm(10)) 202.5868 202.9843 204.6604 203.4284 207.0457  207.2568     5
> 
> 
