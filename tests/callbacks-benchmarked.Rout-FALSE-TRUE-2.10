> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-04-25 r72623) # ramah # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     57.218     83.754    459.7327    109.920    127.295
 doit1(rnorm(10)) 345268.661 568994.426 630412.7641 626067.519 733128.031
 doit2(rnorm(10)) 235525.435 298423.029 399853.6579 375340.649 523774.540
 doit3(rnorm(10))   3363.171   3661.331   9587.3026   4088.375  18536.677
 doit4(rnorm(10))   1759.063   2058.303   3438.9143   2441.418   3358.092
        max neval
   3708.467    10
 989573.888    10
 595897.396    10
  28657.099    10
  10702.366    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median       uq       max
 doit0(rnorm(10))   17.961   31.1455   41.32818   37.7360   46.759   989.759
 doit3(rnorm(10)) 1333.800 1435.5035 1917.52793 1509.3580 2089.890 33878.509
 doit4(rnorm(10))  611.054  745.3710 1010.61521  785.5295 1045.623 11902.855
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3344 200.4179 200.8993 200.4640 200.4977 202.7824     5
 doit1(rnorm(10)) 347.5448 353.0015 379.7705 380.4965 393.3863 424.4232     5
 doit2(rnorm(10)) 295.2700 315.2902 369.6039 324.2599 425.4310 487.7685     5
 doit3(rnorm(10)) 203.3021 203.9720 204.2592 204.1146 204.1403 205.7671     5
 doit4(rnorm(10)) 201.6769 201.7133 202.2391 202.2958 202.4339 203.0754     5
> 
> 
