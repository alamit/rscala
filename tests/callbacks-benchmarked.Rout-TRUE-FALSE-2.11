> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-05-14 r72674) # ramah # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median          uq
 doit0(rnorm(10))     56.966     90.618    433.4274    109.833     117.871
 doit1(rnorm(10)) 688465.384 880943.387 961497.2060 923543.384 1111189.682
 doit2(rnorm(10)) 300600.171 482714.924 697745.6857 534289.485  716882.710
 doit3(rnorm(10))   4288.179   4826.199   6827.0215   5582.986    6575.738
 doit4(rnorm(10))   2147.211   2771.961   3973.9217   2922.964    5177.612
         max neval
    3131.008    10
 1306701.271    10
 1777591.501    10
   13806.259    10
    7243.485    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean   median        uq       max
 doit0(rnorm(10))   18.279   44.229   63.23565   59.261   84.9645   166.179
 doit3(rnorm(10)) 1490.670 2199.686 3282.43327 3403.020 3739.6100 38343.228
 doit4(rnorm(10))  753.950 1309.021 2081.15968 2073.265 2318.2270 45070.146
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.2750 200.3083 200.3812 200.3806 200.4320 200.5103     5
 doit1(rnorm(10)) 423.1956 445.1963 463.7246 449.0851 470.4649 530.6813     5
 doit2(rnorm(10)) 367.3359 384.1597 406.7574 413.5989 432.6032 436.0891     5
 doit3(rnorm(10)) 202.6967 203.8590 204.3399 203.9723 205.1966 205.9748     5
 doit4(rnorm(10)) 201.5249 202.0176 202.0799 202.1723 202.2283 202.4565     5
> 
> 
