> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     43.502     75.711    560.1635    127.265    164.008
 doit1(rnorm(10)) 455229.395 594426.386 927119.9084 921630.729 971727.026
 doit2(rnorm(10)) 314994.433 330394.469 579164.2376 444921.302 869932.540
 doit3(rnorm(10))   2925.216   5196.946  18599.9589  11472.644  36366.158
 doit4(rnorm(10))   1504.059   1995.525   2847.7179   3026.918   3439.412
         max neval
    4567.754    10
 1948457.567    10
 1126581.004    10
   50078.437    10
    5102.122    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq       max
 doit0(rnorm(10))   30.631   59.5535   81.22777   69.719   99.9365  2499.746
 doit3(rnorm(10)) 2375.145 2683.8495 4321.73350 3920.098 4615.2055 88172.362
 doit4(rnorm(10)) 1284.952 1508.0895 2740.88659 2256.610 2789.5925 78904.156
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4244 200.4250 200.5853 200.4897 200.5809  201.0067     5
 doit1(rnorm(10)) 785.1473 880.4630 961.3616 969.7996 976.3296 1195.0683     5
 doit2(rnorm(10)) 595.8736 676.1610 747.9507 748.0433 838.6442  881.0313     5
 doit3(rnorm(10)) 204.9083 204.9854 212.0831 208.1909 212.5367  229.7942     5
 doit4(rnorm(10)) 203.0214 203.2431 204.8780 203.8222 203.9394  210.3639     5
> 
> 
