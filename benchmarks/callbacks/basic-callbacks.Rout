
R version 3.3.0 (2016-05-03) -- "Supposedly Educational"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> s <- scalaInterpreter()
Loading /tmp/RtmpFkvG1g/rscala-3527511a75dc...
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   c(f(x),g(x))
+ }
> 
> doit0(rnorm(10))
[1] 0.330504 1.101829
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.2483881 2.7290842
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.03518234  2.26559923
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- s$def('x: Array[Double]','
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ ')
> 
> doit3(rnorm(10))
[1] 1.499805 2.051610
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     36.886     53.501    102.3435     97.6315    110.086
 doit1(rnorm(10)) 301706.725 328825.258 367299.8062 369925.0025 409397.678
 doit2(rnorm(10)) 203340.552 206684.277 236354.5535 236014.4400 242691.327
 doit3(rnorm(10))   1265.861   1594.837   1792.9279   1739.5625   2092.131
        max neval
    197.401    10
 430325.411    10
 317993.015    10
   2379.787    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=100
+ )
Unit: microseconds
             expr      min       lq       mean    median       uq      max
 doit0(rnorm(10))   29.653   33.997   41.08111   41.0335   44.708   85.245
 doit3(rnorm(10)) 1112.240 1246.829 1533.57946 1560.7185 1699.368 2676.931
 neval
   100
   100
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4455 200.4687 200.4982 200.5132 200.5315 200.5320     5
 doit1(rnorm(10)) 499.5193 500.0629 514.5205 520.1235 524.7546 528.1424     5
 doit2(rnorm(10)) 408.5223 419.4654 427.6500 429.8458 433.3470 447.0694     5
 doit3(rnorm(10)) 202.6225 202.8257 203.1685 203.0209 203.4574 203.9159     5
> 
> 
> proc.time()
   user  system elapsed 
  0.756   0.060  19.435 
