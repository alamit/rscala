
R version 3.3.0 (2016-05-03) -- "Supposedly Educational"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> s <- scalaInterpreter()
Loading /tmp/RtmpMY3kJS/rscala-313562eebe48...
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   c(f(x),g(x))
+ }
> 
> doit0(rnorm(10))
[1] -0.06383582  0.45043703
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 1.623890 2.020046
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.6976414  1.2137191
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- s$def('x: Array[Double]','
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ ')
> 
> doit3(rnorm(10))
[1] -0.318258  1.865655
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq       mean      median         uq
 doit0(rnorm(10))     52.582     86.616     99.708     97.8145    120.234
 doit1(rnorm(10)) 290870.869 335060.916 364440.874 359142.4075 390019.326
 doit2(rnorm(10)) 191278.922 206534.147 231383.439 219364.8205 264256.406
 doit3(rnorm(10))   1611.495   2139.250   2670.537   2605.8210   3433.188
        max neval
    145.607    10
 452974.334    10
 301208.403    10
   3629.394    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=100
+ )
Unit: microseconds
             expr      min       lq       mean    median       uq      max
 doit0(rnorm(10))   28.142   35.100   46.38484   42.1605   47.649  153.765
 doit3(rnorm(10)) 1381.194 1449.537 1606.06962 1533.9130 1637.655 3840.021
 neval
   100
   100
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4540 200.4680 200.4885 200.4836 200.4883 200.5485     5
 doit1(rnorm(10)) 524.8392 534.1186 549.8650 544.6101 570.2447 575.5122     5
 doit2(rnorm(10)) 411.6943 439.4989 446.1608 440.5689 453.3364 485.7053     5
 doit3(rnorm(10)) 203.4400 204.8520 205.1623 205.4681 205.8847 206.1665     5
> 
> 
> proc.time()
   user  system elapsed 
  0.768   0.112  19.314 
