
R version 3.3.0 (2016-05-03) -- "Supposedly Educational"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(rscala)
> s <- scalaInterpreter()
Loading /tmp/RtmpUV8CV8/rscala-11675a48faa3...
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   c(f(x),g(x))
+ }
> 
> doit0(rnorm(10))
[1] 0.7737029 1.0477305
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] -0.8221372  2.3124016
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] 1.029221 1.336233
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- s$def('x: Array[Double]','
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ ')
> 
> doit3(rnorm(10))
[1] 0.08274453 1.99128834
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     38.384     47.985     90.5815     89.699    131.399
 doit1(rnorm(10)) 350850.862 370923.458 408431.3546 395745.605 440150.621
 doit2(rnorm(10)) 201197.625 217919.593 243841.1865 230908.401 257778.922
 doit3(rnorm(10))   1501.453   1631.275   1806.2919   1718.034   1957.086
        max neval
    151.664    10
 500971.431    10
 346980.651    10
   2363.278    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=100
+ )
Unit: microseconds
             expr      min       lq       mean   median        uq      max
 doit0(rnorm(10))   30.041   33.377   39.74835   39.904   43.2265   77.819
 doit3(rnorm(10)) 1132.453 1211.399 1312.37205 1259.063 1335.2900 2157.911
 neval
   100
   100
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4238 200.4976 200.5467 200.5357 200.5440 200.7324     5
 doit1(rnorm(10)) 523.6448 532.0019 540.7200 534.8031 550.9091 562.2413     5
 doit2(rnorm(10)) 404.4478 414.8205 419.9810 422.2764 422.3068 436.0533     5
 doit3(rnorm(10)) 203.5370 203.7032 203.8598 203.9204 203.9456 204.1928     5
> 
> 
> proc.time()
   user  system elapsed 
  0.692   0.084  19.718 
